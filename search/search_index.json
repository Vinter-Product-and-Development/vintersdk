{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting Started","text":"<p>The official Python client library for the Vinter.co APIs.</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install vintersdk\n</code></pre>"},{"location":"#upgrade","title":"Upgrade","text":"<pre><code>pip install --upgrade vintersdk\n</code></pre>"},{"location":"#api-documentation","title":"API Documentation","text":"<p>Vinter API Documentation</p>"},{"location":"#important-notes-about-the-library","title":"Important Notes About the Library","text":"<ul> <li>The library supports both synchronous and asynchronous requests.</li> <li>The library is still in development and will be updated frequently.</li> <li>All the methods are documented in the source code.</li> <li>All the methods are callable from both the synchronous and asynchronous classes.</li> <li>The asynchronous class is called VinterAPIAsync.</li> <li>The synchronous class is called VinterAPI.</li> <li>The asynchronous class repeats the same methods as the synchronous class, but can be called with the await keyword.</li> </ul>"},{"location":"#version-of-the-library","title":"Version of the Library","text":"<pre><code>import vintersdk\nprint(vintersdk.__version__)\n</code></pre>"},{"location":"#importing-the-library","title":"Importing the library","text":"<pre><code>from vintersdk import VinterAPI, VinterAPIAsync\n</code></pre>"},{"location":"#creating-instances-of-the-vinterapi-class","title":"Creating Instances of the VinterAPI class","text":"<pre><code>from vintersdk import VinterAPI\n# Create instances of the VinterAPI class\nvinter_multi = VinterAPI(APIKEY, \"multi_assets\")\nvinter_single = VinterAPI(APIKEY, \"single_assets\")\nvinter_staking = VinterAPI(APIKEY, \"staking_yields\")\nvinter_nav = VinterAPI(APIKEY, \"nav\")\n</code></pre> <p>See the Usage section of the docs for usage examples!</p>"},{"location":"examples/","title":"Usage","text":""},{"location":"examples/#handling-exceptions","title":"Handling Exceptions","text":""},{"location":"examples/#invalid-symbol-exception","title":"Invalid Symbol exception","text":"<pre><code>from vintersdk import VinterAPI\nvinter_multi = VinterAPI(APIKEY, \"multi_assets\")\n# How to handle exceptions and get error messages\ntry:\n# Get data for a non-existent symbol\ninvalid_symbol = \"BTC\"\ndata = vinter_multi.get_latest_data(symbol=invalid_symbol, limit=1)\nexcept Exception as e:\nprint(f\"Exception: {e}\")\n</code></pre>"},{"location":"examples/#get-active-data","title":"Get Active Data","text":"<p>Docs VinterAPI.get_all_active_data</p>"},{"location":"examples/#get-all-active-multi-asset-symbols-dictionary","title":"Get All Active Multi-Asset Symbols Dictionary","text":"<pre><code>from vintersdk import VinterAPI\nvinter_multi = VinterAPI(APIKEY, \"multi_assets\")\n# Get All Active Multi-Asset Symbols Dictionary\nactive_symbols_multi = vinter_multi.get_all_active_data()\nprint(active_symbols_multi)\n</code></pre>"},{"location":"examples/#get-all-active-multi-asset-symbols-only","title":"Get All Active Multi-Asset Symbols only","text":"<pre><code>from vintersdk import VinterAPI\nvinter_multi = VinterAPI(APIKEY, \"multi_assets\")\nactive_symbols_multi = vinter_multi.get_all_active_data(symbol_only=True)\nprint(f\"Number of total active multi-asset symbols: {len(active_symbols_multi)}\")\nprint(f\"First 5 symbols: {active_symbols_multi[:5]}\")\n</code></pre>"},{"location":"examples/#get-all-active-multi-asset-symbols-filter-with-frequency","title":"Get All Active Multi-Asset Symbols filter with frequency","text":"<pre><code>from vintersdk import VinterAPI\nvinter_multi = VinterAPI(APIKEY, \"multi_assets\")\n# Three frequency options: \"r\", \"d\", \"h\"\nactive_symbols_multi = vinter_multi.get_all_active_data(symbol_only=True, frequency=\"r\")\nprint(f\"Number of filtered realtime active multi-asset symbols: {len(active_symbols_multi)}\")\nprint(f\"First 5 symbols: {active_symbols_multi[:5]}\")\n</code></pre>"},{"location":"examples/#get-active-symbol-data-for-a-specific-symbol","title":"Get active symbol data for a specific symbol","text":"<p>Docs VinterAPI.get_active_data</p> <pre><code>from vintersdk import VinterAPI\nvinter_multi = VinterAPI(APIKEY, \"multi_assets\")\nvntr_eq_5_d = vinter_multi.get_active_data(\"vntr-eq-5-d\")\nprint(vntr_eq_5_d)\n</code></pre>"},{"location":"examples/#get-latest-data","title":"Get Latest Data","text":"<p>Docs VinterAPI.get_latest_data</p>"},{"location":"examples/#get-single-data-point","title":"Get single data point","text":"<pre><code>from vintersdk import VinterAPI\nvinter_multi = VinterAPI(APIKEY, \"multi_assets\")\ndata = vinter_multi.get_latest_data(symbol=\"vntr-eq-5-d\", limit=1)\n# The data returned is in schema described in the API documentation\nprint(data)\n</code></pre>"},{"location":"examples/#get-multiple-data-points-in-a-pandas-dataframe","title":"Get multiple data points in a pandas dataframe","text":"<pre><code>import pandas as pd\nfrom vintersdk import VinterAPI\nvinter_multi = VinterAPI(APIKEY, \"multi_assets\")\n# To get 100 rows of data add limit=100\ndata = vinter_multi.get_latest_data(symbol=\"vntr-eq-5-d\", limit=100)\n# A pandas dataframe can be created from the data\ndf = pd.DataFrame(data)\n# Get shape of the dataframe\nprint(df.info())\n</code></pre>"},{"location":"examples/#get-just-the-latest-value","title":"Get just the latest value","text":"<p>Docs VinterAPI.get_latest_value</p> <pre><code>from vintersdk import VinterAPI\nvinter_multi = VinterAPI(APIKEY, \"single_assets\")\n# Get latest value of a btc-usd-p-d\n# As it is a single asset, the instance of the VinterAPI class is different\nlatest_value_btc_usd = vinter_single.get_latest_value(symbol=\"btc-usd-p-d\")\nprint(f\"Latest BTC-USD Price: {latest_value_btc_usd} , Type: {type(latest_value_btc_usd)}\")\n</code></pre>"},{"location":"examples/#get-historical-data-by-date","title":"Get Historical Data by Date","text":"<p>Docs VinterAPI.get_data_by_date</p> <pre><code>from vintersdk import VinterAPI\nvinter_multi = VinterAPI(APIKEY, \"single_assets\")\n### Get data for specified dates for a given symbol\nget_data_by_date_btc_usd = vinter_single.get_data_by_date(symbol=\"btc-usd-p-d\", date=\"2023-01-01\")\nprint(get_data_by_date_btc_usd)\n</code></pre>"},{"location":"examples/#get-historical-data-between-time-ranges","title":"Get Historical Data Between Time Ranges","text":"<p>Docs VinterAPI.get_data_by_range</p> <pre><code>import pandas as pd\nfrom vintersdk import VinterAPI\nvinter_multi = VinterAPI(APIKEY, \"single_assets\")\n# Get data for a single asset for a specific date (2022-01-01 to 2023-01-01)\n# The data returned is in schema described in the API documentation\nget_data_by_range_btc_usd = vinter_single.get_data_by_range(symbol=\"btc-usd-p-d\", start=\"2022-01-01\", end=\"2023-01-01\")\ndf = pd.DataFrame(get_data_by_range_btc_usd)\npprint({\n\"First Date\": df[\"date\"].iloc[0],\n\"Last Date\": df[\"date\"].iloc[-1]\n})\n# The end date is not included, the last date is 2022-12-31 instead of 2023-01-01\n# Due parsing of the date, the end date is set to 2023-01-01T00:00:00Z\n# So the end=\"2023-01-01T23:59:59Z\" will return the last date as 2023-01-01\n# Or the end=\"2023-01-02\" will return the last date as 2023-01-01\nprint(\"-\"*50)\nget_data_by_range_btc_usd = vinter_single.get_data_by_range(symbol=\"btc-usd-p-d\", start=\"2022-01-01\", end=\"2023-01-01T23:59:59Z\")\ndf = pd.DataFrame(get_data_by_range_btc_usd)\npprint({\n\"First Date\": df[\"date\"].iloc[0],\n\"Last Date\": df[\"date\"].iloc[-1]\n})\n</code></pre>"},{"location":"multi_asset/","title":"Multi Asset Specific Usage","text":""},{"location":"multi_asset/#get-current-rebalance-weight","title":"Get Current Rebalance Weight","text":"<p>Docs VinterAPI.get_multi_current_rebalance_weight</p> <pre><code>from vintersdk import VinterAPI\nvinter_multi = VinterAPI(APIKEY, \"multi_assets\")\nvntr_eq_5_d = vinter_multi.get_multi_current_rebalance_weight(symbol=\"vntr-eq-5-d\")\nprint(vntr_eq_5_d)\n</code></pre>"},{"location":"multi_asset/#get-previous-rebalance-date","title":"Get Previous Rebalance Date","text":"<p>Docs VinterAPI.get_multi_previous_rebalance_date</p> <pre><code>from vintersdk import VinterAPI\nvinter_multi = VinterAPI(APIKEY, \"multi_assets\")\nvntr_eq_5_d = vinter_multi.get_multi_previous_rebalance_date(symbol=\"vntr-eq-5-d\")\nprint(f\"Previous Rebalance Date for vntr-eq-5-d: {vntr_eq_5_d}\")\n</code></pre>"},{"location":"multi_asset/#get-previous-review-date","title":"Get Previous Review Date","text":"<p>Docs VinterAPI.get_multi_previous_review_date</p> <pre><code>from vintersdk import VinterAPI\nvinter_multi = VinterAPI(APIKEY, \"multi_assets\")\nvntr_eq_5_d = vinter_multi.get_multi_previous_review_date(symbol=\"vntr-eq-5-d\")\nprint(f\"Previous Review Date for vntr-eq-5-d: {vntr_eq_5_d}\")\n</code></pre>"},{"location":"multi_asset/#get-next-review-date","title":"Get Next Review Date","text":"<p>Docs VinterAPI.get_multi_next_review_date</p> <pre><code>from vintersdk import VinterAPI\nvinter_multi = VinterAPI(APIKEY, \"multi_assets\")\nvntr_eq_5_d = vinter_multi.get_multi_next_review_date(symbol=\"vntr-eq-5-d\")\nprint(f\"Next Review Date for vntr-eq-5-d: {vntr_eq_5_d}\")\n</code></pre>"},{"location":"multi_asset/#get-next-rebalance-date","title":"Get Next Rebalance Date","text":"<p>Docs VinterAPI.get_multi_next_rebalance_date</p> <pre><code>from vintersdk import VinterAPI\nvinter_multi = VinterAPI(APIKEY, \"multi_assets\")\nvntr_eq_5_d = vinter_multi.get_multi_next_rebalance_date(symbol=\"vntr-eq-5-d\")\nprint(f\"Next Rebalance Date for vntr-eq-5-d: {vntr_eq_5_d}\")\n</code></pre>"},{"location":"multi_asset/#get-next-rebalance-weight","title":"Get Next Rebalance Weight","text":"<p>Docs VinterAPI.get_multi_next_rebalance_weight</p> <pre><code>from vintersdk import VinterAPI\nvinter_multi = VinterAPI(APIKEY, \"multi_assets\")\nvntr_eq_5_d = vinter_multi.get_multi_next_rebalance_weight(symbol=\"vntr-eq-5-d\")\nprint(f\"Next Rebalance Weight for vntr-eq-5-d: {vntr_eq_5_d}\")\n</code></pre>"},{"location":"single_asset/","title":"Multi Asset Specific Usage","text":""},{"location":"single_asset/#get-contributions-for-a-single-asset","title":"Get Contributions for a Single Asset","text":"<p>Docs VinterAPI.get_single_contributions</p> <pre><code>from vintersdk import VinterAPI\nvinter_multi = VinterAPI(APIKEY, \"single_assets\")\nbtc_usd_p_r = vinter_single.get_single_contributions(symbol=\"btc-usd-p-r\")\nprint(btc_usd_p_r)\n</code></pre>"},{"location":"websocket/","title":"Websocket Specific Usage","text":""},{"location":"websocket/#get-contributions-for-a-single-asset","title":"Get Contributions for a Single Asset","text":"<p>Docs VinterAPIWS</p> <pre><code>from vintersdk import VinterAPIWS\ndef on_message(ws, message):\nprint(message)\n#ws.close() # Uncomment this line to close the websocket after receiving a message\ndef on_error(ws, error):\nprint(error)\ndef on_close(ws, close_status_code, close_msg):\nprint(\"### closed ###\")\nprint(f\"close_status_code: {close_status_code} close_msg: {close_msg}\")\ndef on_open(ws):\nprint(\"### open ###\")\nvinter_ws = VinterAPIWS(\nsymbol=\"btc-usd-p-r\",\ntoken=APIKEY,\nasset_type=\"single_assets\",\non_message=on_message,\non_error=on_error,\non_close=on_close,\non_open=on_open,\n)\nvinter_ws.open()\n</code></pre>"},{"location":"tests_doc/test_api/","title":"VinterSDK","text":""},{"location":"tests_doc/test_api/#tests.test_api","title":"test_api","text":""},{"location":"tests_doc/test_api/#tests.test_api.test_filter_by_symbol","title":"test_filter_by_symbol","text":"<pre><code>test_filter_by_symbol()\n</code></pre> <p>Test that _filter_by_symbol returns a list of dicts</p> Source code in <code>tests/test_api.py</code> <pre><code>def test_filter_by_symbol():\n\"\"\"\n    Test that _filter_by_symbol returns a list of dicts\n    \"\"\"\napi_key = \"my_api_key\"\nasset_type = \"multi_assets\"\napi = VinterAPI(api_key=api_key, asset_type=asset_type)\nsymbol = \"waves-usd-p-d\"\nexpected_output = [\n{\"symbol\": \"waves-usd-p-d\", \"contrib\": [\"waves-usd-p-r\"]},\n]\nmock_data = [\n{\"symbol\": \"waves-usd-p-d\", \"contrib\": [\"waves-usd-p-r\"]},\n{\"symbol\": \"ton-usdt-p-5-d\", \"contrib\": [\"ton-usdt-p-r\"]},\n]\nresult = api._filter_by_symbol(mock_data, symbol)\nassert result == expected_output\n</code></pre>"},{"location":"tests_doc/test_api/#tests.test_api.test_get_all_active_data_async_returns_list","title":"test_get_all_active_data_async_returns_list","text":"<pre><code>test_get_all_active_data_async_returns_list()\n</code></pre> <p>Test that get_all_active_data returns a list of dicts</p> Source code in <code>tests/test_api.py</code> <pre><code>def test_get_all_active_data_async_returns_list():\n\"\"\"\n    Test that get_all_active_data returns a list of dicts\n    \"\"\"\napi_key = \"my_api_key\"\nasset_type = \"multi_assets\"\napi = VinterAPI(api_key=api_key, asset_type=asset_type)\napi.httpx_client = httpx.Client()\nmock_response = {\n\"result\": \"success\",\n\"message\": \"Success\",\n\"data\": [\n{\"symbol\": \"waves-usd-p-d\", \"contrib\": [\"waves-usd-p-r\"]},\n{\"symbol\": \"ton-usdt-p-5-d\", \"contrib\": [\"ton-usdt-p-r\"]},\n],\n\"params\": {},\n}\nexpected_output = mock_response[\"data\"]\nwith patch.object(api.httpx_client, \"get\", new_callable=Mock) as mock_get:\nmock_get.return_value = Mock(json=Mock(return_value=mock_response))\nresult = api.get_all_active_data()\nassert result == expected_output\n</code></pre>"},{"location":"tests_doc/test_api/#tests.test_api.test_get_all_active_data_async_symbol_only_returns_symbol_list","title":"test_get_all_active_data_async_symbol_only_returns_symbol_list","text":"<pre><code>test_get_all_active_data_async_symbol_only_returns_symbol_list()\n</code></pre> <p>Test that get_all_active_data_async returns a list of dicts</p> Source code in <code>tests/test_api.py</code> <pre><code>def test_get_all_active_data_async_symbol_only_returns_symbol_list():\n\"\"\"\n    Test that get_all_active_data_async returns a list of dicts\n    \"\"\"\napi_key = \"my_api_key\"\nasset_type = \"multi_assets\"\napi = VinterAPI(api_key=api_key, asset_type=asset_type)\napi.httpx_client = httpx.Client()\nmock_response = {\n\"result\": \"success\",\n\"message\": \"Success\",\n\"data\": [\n{\"symbol\": \"waves-usd-p-d\", \"contrib\": [\"waves-usd-p-r\"]},\n{\"symbol\": \"ton-usdt-p-5-d\", \"contrib\": [\"ton-usdt-p-r\"]},\n],\n\"params\": {},\n}\nexpected_output = [\"waves-usd-p-d\", \"ton-usdt-p-5-d\"]\nwith patch.object(api.httpx_client, \"get\", new_callable=Mock) as mock_get:\nmock_get.return_value = Mock(json=Mock(return_value=mock_response))\nresult = api.get_all_active_data(symbol_only=True)\nassert result == expected_output\n</code></pre>"},{"location":"tests_doc/test_api/#tests.test_api.test_get_all_active_data_async_with_frequency_returns_filtered_list","title":"test_get_all_active_data_async_with_frequency_returns_filtered_list","text":"<pre><code>test_get_all_active_data_async_with_frequency_returns_filtered_list()\n</code></pre> <p>Test that get_all_active_data_async returns a list of dicts</p> Source code in <code>tests/test_api.py</code> <pre><code>def test_get_all_active_data_async_with_frequency_returns_filtered_list():\n\"\"\"\n    Test that get_all_active_data_async returns a list of dicts\n    \"\"\"\napi_key = \"my_api_key\"\nasset_type = \"multi_assets\"\napi = VinterAPI(api_key=api_key, asset_type=asset_type)\napi.httpx_client = httpx.Client()\nmock_response = {\n\"result\": \"success\",\n\"message\": \"Success\",\n\"data\": [\n{\"symbol\": \"waves-usd-p-d\", \"contrib\": [\"waves-usd-p-r\"]},\n{\"symbol\": \"ton-usdt-p-5-r\", \"contrib\": [\"ton-usdt-p-r\"]},\n],\n\"params\": {},\n}\nexpected_output = [\n{\"symbol\": \"waves-usd-p-d\", \"contrib\": [\"waves-usd-p-r\"]}\n]\nwith patch.object(api.httpx_client, \"get\", new_callable=Mock) as mock_get:\nmock_get.return_value = Mock(json=Mock(return_value=mock_response))\nresult = api.get_all_active_data(frequency=\"d\")\nassert result == expected_output\n</code></pre>"},{"location":"tests_doc/test_api/#tests.test_api.test_get_latest_data_raises_exception","title":"test_get_latest_data_raises_exception","text":"<pre><code>test_get_latest_data_raises_exception()\n</code></pre> <p>Test that get_latest_data raises a ValueError</p> Source code in <code>tests/test_api.py</code> <pre><code>def test_get_latest_data_raises_exception():\n\"\"\"\n    Test that get_latest_data raises a ValueError\n    \"\"\"\napi_key = \"my_api_key\"\nasset_type = \"single_assets\"\napi = VinterAPI(api_key=api_key, asset_type=asset_type)\napi.httpx_client = httpx.Client()\nmock_response = {\n\"result\": \"success\",\n\"message\": \"Success\",\n\"data\": [],\n\"params\": {\"symbol\": \"btc-usd-p-r\", \"limit\": 1},\n}\nwith patch.object(api.httpx_client, \"get\", new_callable=Mock) as mock_get:\nmock_get.return_value = Mock(json=Mock(return_value=mock_response))\nwith pytest.raises(ValueError):\napi.get_latest_data(\"btc-usd-p-r\")\n</code></pre>"},{"location":"tests_doc/test_api/#tests.test_api.test_get_latest_data_returns_dict","title":"test_get_latest_data_returns_dict","text":"<pre><code>test_get_latest_data_returns_dict()\n</code></pre> <p>Test that get_latest_data returns a dict</p> Source code in <code>tests/test_api.py</code> <pre><code>def test_get_latest_data_returns_dict():\n\"\"\"\n    Test that get_latest_data returns a dict\n    \"\"\"\napi_key = \"my_api_key\"\nasset_type = \"single_assets\"\napi = VinterAPI(api_key=api_key, asset_type=asset_type)\napi.httpx_client = httpx.Client()\nmock_response = {\n\"result\": \"success\",\n\"message\": \"Success\",\n\"data\": [\n{\n\"symbol\": \"btc-usd-p-r\",\n\"timestamp\": 1647724800,\n}\n],\n\"params\": {\"symbol\": \"btc-usd-p-r\", \"limit\": 1},\n}\nexpected_output = mock_response[\"data\"]\nwith patch.object(api.httpx_client, \"get\", new_callable=Mock) as mock_get:\nmock_get.return_value = Mock(json=Mock(return_value=mock_response))\nresult = api.get_latest_data(\"btc-usd-p-r\")\nassert result == expected_output\n</code></pre>"},{"location":"tests_doc/test_api/#tests.test_api.test_get_latest_value","title":"test_get_latest_value","text":"<pre><code>test_get_latest_value()\n</code></pre> <p>Test that get_latest_value returns a float</p> Source code in <code>tests/test_api.py</code> <pre><code>def test_get_latest_value():\n\"\"\"\n    Test that get_latest_value returns a float\n    \"\"\"\napi_key = \"my_api_key\"\nasset_type = \"single_assets\"\napi = VinterAPI(api_key=api_key, asset_type=asset_type)\napi.httpx_client = httpx.Client()\nmock_response = {\n\"result\": \"success\",\n\"message\": \"Success\",\n\"data\": [\n{\"symbol\": \"btc-usd-p-r\", \"timestamp\": 1647724800, \"value\": 1000}\n],\n\"params\": {\"symbol\": \"btc-usd-p-r\", \"limit\": 1},\n}\nexpected_output = mock_response[\"data\"][0][\"value\"]\nwith patch.object(api.httpx_client, \"get\", new_callable=Mock) as mock_get:\nmock_get.return_value = Mock(json=Mock(return_value=mock_response))\nresult = api.get_latest_value(\"btc-usd-p-r\")\nassert result == expected_output\n</code></pre>"},{"location":"tests_doc/test_async_api/","title":"Vinter SDK Async","text":""},{"location":"tests_doc/test_async_api/#tests.test_async_api","title":"test_async_api","text":""},{"location":"tests_doc/test_async_api/#tests.test_async_api.test_filter_by_symbol","title":"test_filter_by_symbol","text":"<pre><code>test_filter_by_symbol()\n</code></pre> <p>Test that _filter_by_symbol returns a list of dicts</p> Source code in <code>tests/test_async_api.py</code> <pre><code>def test_filter_by_symbol():\n\"\"\"\n    Test that _filter_by_symbol returns a list of dicts\n    \"\"\"\napi_key = \"my_api_key\"\nasset_type = \"multi_assets\"\napi = VinterAPIAsync(api_key=api_key, asset_type=asset_type)\nsymbol = \"waves-usd-p-d\"\nexpected_output = [\n{\"symbol\": \"waves-usd-p-d\", \"contrib\": [\"waves-usd-p-r\"]},\n]\nmock_data = [\n{\"symbol\": \"waves-usd-p-d\", \"contrib\": [\"waves-usd-p-r\"]},\n{\"symbol\": \"ton-usdt-p-5-d\", \"contrib\": [\"ton-usdt-p-r\"]},\n]\nresult = api._filter_by_symbol(mock_data, symbol)\nassert result == expected_output\n</code></pre>"},{"location":"tests_doc/test_async_api/#tests.test_async_api.test_get_all_active_data_async_returns_list","title":"test_get_all_active_data_async_returns_list  <code>async</code>","text":"<pre><code>test_get_all_active_data_async_returns_list()\n</code></pre> <p>Test that get_all_active_data returns a list of dicts</p> Source code in <code>tests/test_async_api.py</code> <pre><code>@pytest.mark.asyncio\nasync def test_get_all_active_data_async_returns_list():\n\"\"\"\n    Test that get_all_active_data returns a list of dicts\n    \"\"\"\napi_key = \"my_api_key\"\nasset_type = \"multi_assets\"\napi = VinterAPIAsync(api_key=api_key, asset_type=asset_type)\napi.httpx_client = httpx.AsyncClient()\nmock_response = {\n\"result\": \"success\",\n\"message\": \"Success\",\n\"data\": [\n{\"symbol\": \"waves-usd-p-d\", \"contrib\": [\"waves-usd-p-r\"]},\n{\"symbol\": \"ton-usdt-p-5-d\", \"contrib\": [\"ton-usdt-p-r\"]},\n],\n\"params\": {},\n}\nexpected_output = mock_response[\"data\"]\nwith patch.object(\napi.httpx_client, \"get\", new_callable=AsyncMock\n) as mock_get:\nmock_get.return_value = AsyncMock(\njson=Mock(return_value=mock_response)\n)\nresult = await api.get_all_active_data()\nassert result == expected_output\nawait api.httpx_client.aclose()\n</code></pre>"},{"location":"tests_doc/test_async_api/#tests.test_async_api.test_get_all_active_data_async_symbol_only_returns_symbol_list","title":"test_get_all_active_data_async_symbol_only_returns_symbol_list  <code>async</code>","text":"<pre><code>test_get_all_active_data_async_symbol_only_returns_symbol_list()\n</code></pre> <p>Test that get_all_active_data_async returns a list of dicts</p> Source code in <code>tests/test_async_api.py</code> <pre><code>@pytest.mark.asyncio\nasync def test_get_all_active_data_async_symbol_only_returns_symbol_list():\n\"\"\"\n    Test that get_all_active_data_async returns a list of dicts\n    \"\"\"\napi_key = \"my_api_key\"\nasset_type = \"multi_assets\"\napi = VinterAPIAsync(api_key=api_key, asset_type=asset_type)\napi.httpx_client = httpx.AsyncClient()\nmock_response = {\n\"result\": \"success\",\n\"message\": \"Success\",\n\"data\": [\n{\"symbol\": \"waves-usd-p-d\", \"contrib\": [\"waves-usd-p-r\"]},\n{\"symbol\": \"ton-usdt-p-5-d\", \"contrib\": [\"ton-usdt-p-r\"]},\n],\n\"params\": {},\n}\nexpected_output = [\"waves-usd-p-d\", \"ton-usdt-p-5-d\"]\nwith patch.object(\napi.httpx_client, \"get\", new_callable=AsyncMock\n) as mock_get:\nmock_get.return_value = AsyncMock(\njson=Mock(return_value=mock_response)\n)\nresult = await api.get_all_active_data(symbol_only=True)\nassert result == expected_output\nawait api.httpx_client.aclose()\n</code></pre>"},{"location":"tests_doc/test_async_api/#tests.test_async_api.test_get_all_active_data_async_with_frequency_returns_filtered_list","title":"test_get_all_active_data_async_with_frequency_returns_filtered_list  <code>async</code>","text":"<pre><code>test_get_all_active_data_async_with_frequency_returns_filtered_list()\n</code></pre> <p>Test that get_all_active_data_async returns a list of dicts</p> Source code in <code>tests/test_async_api.py</code> <pre><code>@pytest.mark.asyncio\nasync def test_get_all_active_data_async_with_frequency_returns_filtered_list():\n\"\"\"\n    Test that get_all_active_data_async returns a list of dicts\n    \"\"\"\napi_key = \"my_api_key\"\nasset_type = \"multi_assets\"\napi = VinterAPIAsync(api_key=api_key, asset_type=asset_type)\napi.httpx_client = httpx.AsyncClient()\nmock_response = {\n\"result\": \"success\",\n\"message\": \"Success\",\n\"data\": [\n{\"symbol\": \"waves-usd-p-d\", \"contrib\": [\"waves-usd-p-r\"]},\n{\"symbol\": \"ton-usdt-p-5-r\", \"contrib\": [\"ton-usdt-p-r\"]},\n],\n\"params\": {},\n}\nexpected_output = [\n{\"symbol\": \"waves-usd-p-d\", \"contrib\": [\"waves-usd-p-r\"]}\n]\nwith patch.object(\napi.httpx_client, \"get\", new_callable=AsyncMock\n) as mock_get:\nmock_get.return_value = AsyncMock(\njson=Mock(return_value=mock_response)\n)\nresult = await api.get_all_active_data(frequency=\"d\")\nassert result == expected_output\nawait api.httpx_client.aclose()\n</code></pre>"},{"location":"tests_doc/test_async_api/#tests.test_async_api.test_get_latest_data_raises_exception","title":"test_get_latest_data_raises_exception  <code>async</code>","text":"<pre><code>test_get_latest_data_raises_exception()\n</code></pre> <p>Test that get_latest_data raises a ValueError</p> Source code in <code>tests/test_async_api.py</code> <pre><code>@pytest.mark.asyncio\nasync def test_get_latest_data_raises_exception():\n\"\"\"\n    Test that get_latest_data raises a ValueError\n    \"\"\"\napi_key = \"my_api_key\"\nasset_type = \"single_assets\"\napi = VinterAPIAsync(api_key=api_key, asset_type=asset_type)\napi.httpx_client = httpx.AsyncClient()\nmock_response = {\n\"result\": \"success\",\n\"message\": \"Success\",\n\"data\": [],\n\"params\": {\"symbol\": \"btc-usd-p-r\", \"limit\": 1},\n}\nwith patch.object(\napi.httpx_client, \"get\", new_callable=AsyncMock\n) as mock_get:\nmock_get.return_value = AsyncMock(\njson=Mock(return_value=mock_response)\n)\nwith pytest.raises(ValueError):\nawait api.get_latest_data(\"btc-usd-p-r\")\nawait api.httpx_client.aclose()\n</code></pre>"},{"location":"tests_doc/test_async_api/#tests.test_async_api.test_get_latest_data_returns_dict","title":"test_get_latest_data_returns_dict  <code>async</code>","text":"<pre><code>test_get_latest_data_returns_dict()\n</code></pre> <p>Test that get_latest_data returns a dict</p> Source code in <code>tests/test_async_api.py</code> <pre><code>@pytest.mark.asyncio\nasync def test_get_latest_data_returns_dict():\n\"\"\"\n    Test that get_latest_data returns a dict\n    \"\"\"\napi_key = \"my_api_key\"\nasset_type = \"single_assets\"\napi = VinterAPIAsync(api_key=api_key, asset_type=asset_type)\napi.httpx_client = httpx.AsyncClient()\nmock_response = {\n\"result\": \"success\",\n\"message\": \"Success\",\n\"data\": [\n{\n\"symbol\": \"btc-usd-p-r\",\n\"timestamp\": 1647724800,\n}\n],\n\"params\": {\"symbol\": \"btc-usd-p-r\", \"limit\": 1},\n}\nexpected_output = mock_response[\"data\"]\nwith patch.object(\napi.httpx_client, \"get\", new_callable=AsyncMock\n) as mock_get:\nmock_get.return_value = AsyncMock(\njson=Mock(return_value=mock_response)\n)\nresult = await api.get_latest_data(\"btc-usd-p-r\")\nassert result == expected_output\nawait api.httpx_client.aclose()\n</code></pre>"},{"location":"tests_doc/test_async_api/#tests.test_async_api.test_get_latest_value","title":"test_get_latest_value  <code>async</code>","text":"<pre><code>test_get_latest_value()\n</code></pre> <p>Test that get_latest_value returns a float</p> Source code in <code>tests/test_async_api.py</code> <pre><code>@pytest.mark.asyncio\nasync def test_get_latest_value():\n\"\"\"\n    Test that get_latest_value returns a float\n    \"\"\"\napi_key = \"my_api_key\"\nasset_type = \"single_assets\"\napi = VinterAPIAsync(api_key=api_key, asset_type=asset_type)\napi.httpx_client = httpx.AsyncClient()\nmock_response = {\n\"result\": \"success\",\n\"message\": \"Success\",\n\"data\": [\n{\"symbol\": \"btc-usd-p-r\", \"timestamp\": 1647724800, \"value\": 1000}\n],\n\"params\": {\"symbol\": \"btc-usd-p-r\", \"limit\": 1},\n}\nexpected_output = mock_response[\"data\"][0][\"value\"]\nwith patch.object(\napi.httpx_client, \"get\", new_callable=AsyncMock\n) as mock_get:\nmock_get.return_value = AsyncMock(\njson=Mock(return_value=mock_response)\n)\nresult = await api.get_latest_value(\"btc-usd-p-r\")\nassert result == expected_output\nawait api.httpx_client.aclose()\n</code></pre>"},{"location":"tests_doc/test_vinter_utils/","title":"Test Vinter Utils","text":""},{"location":"tests_doc/test_vinter_utils/#tests.test_vinter_utils","title":"test_vinter_utils","text":""},{"location":"tests_doc/test_vinter_utils/#tests.test_vinter_utils.test_classess","title":"test_classess","text":"<pre><code>test_classess()\n</code></pre> <p>This function tests the classes in the vinter_validation.py and vinter_url.py files</p> Source code in <code>tests/test_vinter_utils.py</code> <pre><code>def test_classess():\n\"\"\"This function tests the classes in the vinter_validation.py and vinter_url.py files\"\"\"\nvinter_validation = VinterValidation()\nvinter_url = VinterUrl()\nvinter_error = VinterError()\nassert vinter_error is not None\nassert vinter_validation is not None\nassert vinter_url is not None\n</code></pre>"},{"location":"tests_doc/test_vinter_utils/#tests.test_vinter_utils.test_get_active_url","title":"test_get_active_url","text":"<pre><code>test_get_active_url()\n</code></pre> <p>The function <code>get_active_url</code> takes an asset type as a string and returns the url for the active assets of that type.</p> Source code in <code>tests/test_vinter_utils.py</code> <pre><code>def test_get_active_url():\n\"\"\"&gt; The function `get_active_url` takes an asset type as a string and returns the url for the active\n    assets of that type.\n    \"\"\"\nasset_type = \"multi_assets\"\nurl = VinterUrl.get_active_url(asset_type)\nassert url == f\"https://www.vinterapi.com/api/v3/active_{asset_type}\"\n</code></pre>"},{"location":"tests_doc/test_vinter_utils/#tests.test_vinter_utils.test_get_active_url_invalid_asset_type","title":"test_get_active_url_invalid_asset_type","text":"<pre><code>test_get_active_url_invalid_asset_type()\n</code></pre> <p><code>get_active_url</code> returns the active url for the given asset type</p> Source code in <code>tests/test_vinter_utils.py</code> <pre><code>def test_get_active_url_invalid_asset_type():\n\"\"\"`get_active_url` returns the active url for the given asset type\"\"\"\nasset_type = \"invalid_asset_type\"\nwith pytest.raises(ValueError):\nVinterUrl.get_active_url(asset_type)\n</code></pre>"},{"location":"tests_doc/test_vinter_utils/#tests.test_vinter_utils.test_get_url","title":"test_get_url","text":"<pre><code>test_get_url()\n</code></pre> <p>The function <code>get_url</code> takes two arguments, <code>asset_type</code> and <code>frequency</code>, and returns a string that is the url for the Vinter API</p> Source code in <code>tests/test_vinter_utils.py</code> <pre><code>def test_get_url():\n\"\"\"&gt; The function `get_url` takes two arguments, `asset_type` and `frequency`, and returns a string\n    that is the url for the Vinter API\n    \"\"\"\nasset_type = \"multi_assets\"\nfrequency = \"d\"\nurl = VinterUrl.get_url(asset_type, frequency)\nassert url == f\"https://www.vinterapi.com/api/v3/{asset_type}_daily\"\n</code></pre>"},{"location":"tests_doc/test_vinter_utils/#tests.test_vinter_utils.test_get_url_by_symbol","title":"test_get_url_by_symbol","text":"<pre><code>test_get_url_by_symbol()\n</code></pre> <p>Given an asset type and a symbol, return the url for the corresponding API endpoint</p> Source code in <code>tests/test_vinter_utils.py</code> <pre><code>def test_get_url_by_symbol():\n\"\"\"&gt; Given an asset type and a symbol, return the url for the corresponding API endpoint\"\"\"\nasset_type = \"single_assets\"\nsymbol = \"btc-usd-p-d\"\nurl = VinterUrl.get_url_by_symbol(asset_type, symbol)\nassert url == \"https://www.vinterapi.com/api/v3/single_assets_daily\"\n</code></pre>"},{"location":"tests_doc/test_vinter_utils/#tests.test_vinter_utils.test_get_url_invalid_asset_type","title":"test_get_url_invalid_asset_type","text":"<pre><code>test_get_url_invalid_asset_type()\n</code></pre> <p>It tests that the function <code>get_url</code> raises a <code>ValueError</code> when an invalid asset type is passed to it</p> Source code in <code>tests/test_vinter_utils.py</code> <pre><code>def test_get_url_invalid_asset_type():\n\"\"\"It tests that the function `get_url` raises a `ValueError` when an invalid asset type is passed to\n    it\n    \"\"\"\nasset_type = \"invalid_asset_type\"\nfrequency = \"d\"\nwith pytest.raises(ValueError):\nVinterUrl.get_url(asset_type, frequency)\n</code></pre>"},{"location":"tests_doc/test_vinter_utils/#tests.test_vinter_utils.test_get_websocket_url","title":"test_get_websocket_url","text":"<pre><code>test_get_websocket_url()\n</code></pre> <p>Given an asset type and a symbol, return the url for the corresponding websocket endpoint</p> Source code in <code>tests/test_vinter_utils.py</code> <pre><code>def test_get_websocket_url():\n\"\"\"&gt; Given an asset type and a symbol, return the url for the corresponding websocket endpoint\"\"\"\nasset_type = \"single_assets\"\nsymbol = \"btc-usd-p-d\"\nurl = VinterUrl.websocket_url(asset_type, symbol)\nassert url == f\"wss://www.vinterapi.com/ws/singleassets/{symbol}\"\n</code></pre>"},{"location":"tests_doc/test_vinter_utils/#tests.test_vinter_utils.test_get_websocket_url_invalid_asset_type","title":"test_get_websocket_url_invalid_asset_type","text":"<pre><code>test_get_websocket_url_invalid_asset_type()\n</code></pre> <p>It tests that the function <code>get_websocket_url</code> raises a <code>ValueError</code> when an invalid asset type is passed to it</p> Source code in <code>tests/test_vinter_utils.py</code> <pre><code>def test_get_websocket_url_invalid_asset_type():\n\"\"\"It tests that the function `get_websocket_url` raises a `ValueError` when an invalid asset type is\n    passed to it\n    \"\"\"\nasset_type = \"invalid_asset_type\"\nsymbol = \"btc-usd-p-d\"\nwith pytest.raises(ValueError):\nVinterUrl.websocket_url(asset_type, symbol)\n</code></pre>"},{"location":"tests_doc/test_vinter_utils/#tests.test_vinter_utils.test_get_websocket_url_no_symbol","title":"test_get_websocket_url_no_symbol","text":"<pre><code>test_get_websocket_url_no_symbol()\n</code></pre> <p>It tests that the function <code>get_websocket_url</code> raises a <code>ValueError</code> when no symbol is passed to it</p> Source code in <code>tests/test_vinter_utils.py</code> <pre><code>def test_get_websocket_url_no_symbol():\n\"\"\"It tests that the function `get_websocket_url` raises a `ValueError` when no symbol is passed to\n    it\n    \"\"\"\nasset_type = \"single_assets\"\nsymbol = None\nwith pytest.raises(ValueError):\nVinterUrl.websocket_url(asset_type, symbol)\n</code></pre>"},{"location":"tests_doc/test_vinter_utils/#tests.test_vinter_utils.test_invalid_asset_type","title":"test_invalid_asset_type","text":"<pre><code>test_invalid_asset_type()\n</code></pre> <p><code>test_invalid_asset_type</code> tests that the <code>validate_asset_type</code> function raises a <code>ValueError</code> when an invalid asset type is passed to it</p> Source code in <code>tests/test_vinter_utils.py</code> <pre><code>def test_invalid_asset_type():\n\"\"\"`test_invalid_asset_type` tests that the `validate_asset_type` function raises a `ValueError` when\n    an invalid asset type is passed to it\n    \"\"\"\nwith pytest.raises(ValueError):\nVinterValidation.validate_asset_type(\"invalid_asset\")\n</code></pre>"},{"location":"tests_doc/test_vinter_utils/#tests.test_vinter_utils.test_invalid_frequency","title":"test_invalid_frequency","text":"<pre><code>test_invalid_frequency()\n</code></pre> <p>It raises a ValueError if the frequency is not one of the valid frequencies</p> Source code in <code>tests/test_vinter_utils.py</code> <pre><code>def test_invalid_frequency():\n\"\"\"It raises a ValueError if the frequency is not one of the valid frequencies\"\"\"\nwith pytest.raises(ValueError):\nVinterValidation.validate_frequency(\"invalid_frequency\")\n</code></pre>"},{"location":"tests_doc/test_vinter_utils/#tests.test_vinter_utils.test_invalid_symbol","title":"test_invalid_symbol","text":"<pre><code>test_invalid_symbol()\n</code></pre> <p>It raises a ValueError if the symbol is not a valid symbol</p> Source code in <code>tests/test_vinter_utils.py</code> <pre><code>def test_invalid_symbol():\n\"\"\"It raises a ValueError if the symbol is not a valid symbol\"\"\"\nwith pytest.raises(ValueError):\nVinterValidation.validate_symbol_frequency(\"invalid_symbol\")\n</code></pre>"},{"location":"tests_doc/test_vinter_utils/#tests.test_vinter_utils.test_symbol_none","title":"test_symbol_none","text":"<pre><code>test_symbol_none()\n</code></pre> <p>It tests that the function <code>validate_symbol_frequency</code> raises a <code>ValueError</code> when no symbol is passed to it</p> Source code in <code>tests/test_vinter_utils.py</code> <pre><code>def test_symbol_none():\n\"\"\"It tests that the function `validate_symbol_frequency` raises a `ValueError` when no symbol is\n    passed to it\n    \"\"\"\nsymbol = None\nwith pytest.raises(ValueError):\nVinterValidation.validate_symbol_frequency(symbol)\n</code></pre>"},{"location":"tests_doc/test_vinter_utils/#tests.test_vinter_utils.test_valid_asset_type","title":"test_valid_asset_type","text":"<pre><code>test_valid_asset_type()\n</code></pre> <p>This function checks if the asset type is valid</p> Source code in <code>tests/test_vinter_utils.py</code> <pre><code>def test_valid_asset_type():\n\"\"\"This function checks if the asset type is valid\"\"\"\nvalid_asset = \"multi_assets\"\nassert VinterValidation.validate_asset_type(valid_asset) is None\n</code></pre>"},{"location":"tests_doc/test_vinter_utils/#tests.test_vinter_utils.test_valid_frequency","title":"test_valid_frequency","text":"<pre><code>test_valid_frequency()\n</code></pre> <p>This function tests that a valid frequency is accepted</p> Source code in <code>tests/test_vinter_utils.py</code> <pre><code>def test_valid_frequency():\n\"\"\"&gt; This function tests that a valid frequency is accepted\"\"\"\nvalid_frequency = \"d\"\nassert VinterValidation.validate_frequency(valid_frequency) is None\n</code></pre>"},{"location":"tests_doc/test_vinter_utils/#tests.test_vinter_utils.test_valid_symbol","title":"test_valid_symbol","text":"<pre><code>test_valid_symbol()\n</code></pre> <p><code>validate_symbol_frequency</code> takes a string as input and returns a tuple of two strings. The first string is the symbol and the second string is the frequency</p> Source code in <code>tests/test_vinter_utils.py</code> <pre><code>def test_valid_symbol():\n\"\"\"`validate_symbol_frequency` takes a string as input and returns a tuple of two strings. The first\n    string is the symbol and the second string is the frequency\n    \"\"\"\nvalid_symbol = \"btc-usd-p-d\"\nfreq = \"d\"\nassert VinterValidation.validate_symbol_frequency(valid_symbol) == (\nvalid_symbol,\nfreq,\n)\n</code></pre>"},{"location":"tests_doc/test_vinter_utils/#tests.test_vinter_utils.test_validate_dates","title":"test_validate_dates","text":"<pre><code>test_validate_dates()\n</code></pre> <p>It tests that the function <code>validate_dates</code> raises an error when it should, and doesn't raise an error when it shouldn't</p> Source code in <code>tests/test_vinter_utils.py</code> <pre><code>def test_validate_dates():\n\"\"\"It tests that the function `validate_dates` raises an error when it should, and doesn't raise an\n    error when it shouldn't\n    \"\"\"\n# Test a list of valid dates\nvalid_dates = [\"2022-03-18\", \"2022-03-19\", \"2022-03-20\"]\nVinterValidation.validate_dates(valid_dates)  # Should not raise an error\n# Test a list with an invalid date\ninvalid_dates = [\"2022-03-18\", \"2022-03-19\", \"invalid_date\"]\nwith pytest.raises(ValueError) as e:\nVinterValidation.validate_dates(invalid_dates)\nassert \"The date must be in the format YYYY-MM-DD\" in str(\n\"\".join(e.value.args)\n)\n# Test an empty list\nempty_list = []\nVinterValidation.validate_dates(empty_list)  # Should not raise an error\n</code></pre>"},{"location":"tests_doc/test_ws/","title":"Websocket Test","text":""},{"location":"tests_doc/test_ws/#tests.test_ws","title":"test_ws","text":""},{"location":"tests_doc/test_ws/#tests.test_ws.test_validate_class","title":"test_validate_class","text":"<pre><code>test_validate_class()\n</code></pre> <p>This function tests the classes in the vinter_validation.py and vinter_url.py files</p> Source code in <code>tests/test_ws.py</code> <pre><code>def test_validate_class():\n\"\"\"This function tests the classes in the vinter_validation.py and vinter_url.py files\"\"\"\ndef on_message(ws, message):\npass\ndef on_error(ws, error):\npass\ndef on_close(ws, close_status_code, close_msg):\npass\ndef on_open(ws):\npass\nvinter_api_ws = VinterAPIWS(\nsymbol=\"btc-usd-p-d\",\ntoken=\"\",\nasset_type=\"multi_assets\",\non_message=on_message,\non_error=on_error,\non_close=on_close,\non_open=on_open,\n)\nassert vinter_api_ws is not None\nvinter_api_ws.open()\nvinter_api_ws.close()\n</code></pre>"},{"location":"vintersdk_doc/config/","title":"config.py","text":""},{"location":"vintersdk_doc/config/#vintersdk.config","title":"config","text":""},{"location":"vintersdk_doc/config/#vintersdk.config.APIBASE","title":"APIBASE  <code>module-attribute</code>","text":"<pre><code>APIBASE = 'https://www.vinterapi.com/api/v3'\n</code></pre> <p>API base URL</p>"},{"location":"vintersdk_doc/config/#vintersdk.config.WSBASE","title":"WSBASE  <code>module-attribute</code>","text":"<pre><code>WSBASE = 'wss://www.vinterapi.com/ws'\n</code></pre> <p>Websocket base URL</p>"},{"location":"vintersdk_doc/config/#vintersdk.config.ActiveAssetType","title":"ActiveAssetType","text":"<p>             Bases: <code>Enum</code></p> <ul> <li> <p>active_multi_assets</p> </li> <li> <p>active_single_assets</p> </li> <li> <p>active_staking_yields</p> </li> <li> <p>active_nav</p> </li> </ul>"},{"location":"vintersdk_doc/config/#vintersdk.config.AssetType","title":"AssetType","text":"<p>             Bases: <code>Enum</code></p> <ul> <li> <p>multi_assets</p> </li> <li> <p>single_assets</p> </li> <li> <p>staking_yields</p> </li> <li> <p>nav</p> </li> </ul>"},{"location":"vintersdk_doc/config/#vintersdk.config.AssetUrl","title":"AssetUrl","text":"<p>             Bases: <code>Enum</code></p> <p>Asset urls for each asset type</p> <p>MULTI_ASSET_REAL_TIME: Multi assets real time</p> <p>SINGLE_ASSET_REAL_TIME: Single assets real time</p> <p>NAV_REAL_TIME: Net asset value real time</p> <p>MULTI_ASSET_HOURLY: Multi assets hourly</p> <p>SINGLE_ASSET_HOURLY: Single assets hourly</p> <p>NAV_HOURLY: Net asset value hourly</p> <p>MULTI_ASSET_DAILY: Multi assets daily</p> <p>SINGLE_ASSET_DAILY: Single assets daily</p> <p>STAKING_YIELD_DAILY: Staking yields daily</p> <p>NAV_DAILY: Net asset value daily</p> <p>ACTIVE_MULTI_ASSET: Active multi assets</p> <p>ACTIVE_SINGLE_ASSET: Active single assets</p> <p>ACTIVE_STAKING_YIELD: Active staking yields</p> <p>ACTIVE_NAV: Active net asset value</p>"},{"location":"vintersdk_doc/config/#vintersdk.config.Frequency","title":"Frequency","text":"<p>             Bases: <code>Enum</code></p> <ul> <li> <p>r</p> </li> <li> <p>h</p> </li> <li> <p>d</p> </li> </ul>"},{"location":"vintersdk_doc/config/#vintersdk.config.FrequencyApiType","title":"FrequencyApiType","text":"<p>             Bases: <code>Enum</code></p> <ul> <li> <p>real_time</p> </li> <li> <p>hourly</p> </li> <li> <p>daily</p> </li> </ul>"},{"location":"vintersdk_doc/config/#vintersdk.config.WsAssetType","title":"WsAssetType","text":"<p>             Bases: <code>Enum</code></p> <ul> <li> <p>multi_assets</p> </li> <li> <p>single_assets</p> </li> <li> <p>nav</p> </li> </ul>"},{"location":"vintersdk_doc/config/#vintersdk.config.WsAssetUrl","title":"WsAssetUrl","text":"<p>             Bases: <code>Enum</code></p> <p>Websocket urls for each asset type</p> <p>MULTI_ASSET: Multi assets</p> <p>SINGLE_ASSET: Single assets</p> <p>NAV: Net asset value</p>"},{"location":"vintersdk_doc/utils/","title":"utils.py","text":""},{"location":"vintersdk_doc/utils/#vintersdk.utils","title":"utils","text":""},{"location":"vintersdk_doc/utils/#vintersdk.utils.VinterError","title":"VinterError","text":"<pre><code>VinterError()\n</code></pre> Source code in <code>vintersdk/utils.py</code> <pre><code>def __init__(self):\npass\n</code></pre>"},{"location":"vintersdk_doc/utils/#vintersdk.utils.VinterError.get_error_message","title":"get_error_message  <code>staticmethod</code>","text":"<pre><code>get_error_message(response: dict, status_code: int) -&gt; str\n</code></pre> <p>It takes in a response and returns an error message</p> <p>Parameters:</p> <ul> <li> <code>response</code>             (<code>dict</code>)         \u2013          <p>The response from the api.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>    The error message is being returned.</code>         \u2013          </li> </ul> Source code in <code>vintersdk/utils.py</code> <pre><code>@staticmethod\ndef get_error_message(response: dict, status_code: int) -&gt; str:\n\"\"\"It takes in a response and returns an error message\n    Parameters\n    ----------\n    response : dict\n        The response from the api.\n    Returns\n    -------\n        The error message is being returned.\n    \"\"\"\nreturn {\n\"result\": response.get(\"result\"),\n\"message\": response.get(\"message\"),\n\"status_code\": status_code,\n}\n</code></pre>"},{"location":"vintersdk_doc/utils/#vintersdk.utils.VinterUrl","title":"VinterUrl","text":"<pre><code>VinterUrl()\n</code></pre> Source code in <code>vintersdk/utils.py</code> <pre><code>def __init__(self):\npass\n</code></pre>"},{"location":"vintersdk_doc/utils/#vintersdk.utils.VinterUrl.get_active_url","title":"get_active_url  <code>staticmethod</code>","text":"<pre><code>get_active_url(asset_type: str) -&gt; str\n</code></pre> <p>It takes in an asset type and returns a url</p> <p>Parameters:</p> <ul> <li> <code>asset_type</code>             (<code>str</code>)         \u2013          <p>str</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>url</code> (            <code>str</code> )        \u2013          <p>The url is being returned.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ValueError</code>           \u2013          <p>If the asset type is not in the list of valid asset types.</p> </li> </ul> Source code in <code>vintersdk/utils.py</code> <pre><code>@staticmethod\ndef get_active_url(asset_type: str) -&gt; str:\n\"\"\"It takes in an asset type and returns a url\n    Parameters\n    ----------\n    asset_type : str\n        str\n    Returns\n    -------\n    url : str\n        The url is being returned.\n    Raises\n    ------\n    ValueError\n        If the asset type is not in the list of valid asset types.\n    \"\"\"\nurl = None\nfor asset_url in AssetUrl:\nif (\nasset_url.value[\"asset_type\"].value == asset_type\nand asset_url.value[\"frequency\"] is None\n):\nurl = asset_url.value[\"url\"]\nbreak\nif url is None:\nraise ValueError(f\"The asset type must be in {asset_type}\")\nreturn url\n</code></pre>"},{"location":"vintersdk_doc/utils/#vintersdk.utils.VinterUrl.get_url","title":"get_url  <code>staticmethod</code>","text":"<pre><code>get_url(asset_type: str, frequency: str = None) -&gt; str\n</code></pre> <p>It takes in an asset type and a frequency and returns a url</p> <p>Parameters:</p> <ul> <li> <code>asset_type</code>             (<code>str</code>)         \u2013          <p>The type of asset you want to get data for.</p> </li> <li> <code>frequency</code>             (<code>str</code>, default:                 <code>None</code> )         \u2013          <p>The frequency of the asset you want to get data for., optional</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>    The url is being returned.</code>         \u2013          </li> </ul> Source code in <code>vintersdk/utils.py</code> <pre><code>@staticmethod\ndef get_url(asset_type: str, frequency: str = None) -&gt; str:\n\"\"\"It takes in an asset type and a frequency and returns a url\n    Parameters\n    ----------\n    asset_type : str\n        The type of asset you want to get data for.\n    frequency : str\n        The frequency of the asset you want to get data for., optional\n    Returns\n    -------\n        The url is being returned.\n    \"\"\"\nasset_types = [asset_type.value for asset_type in AssetType]\nurl = None\nfor asset_url in AssetUrl:\nif (\nasset_url.value[\"asset_type\"].value == asset_type\nand asset_url.value[\"frequency\"] is not None\nand asset_url.value[\"frequency\"].value == frequency\n):\nurl = asset_url.value[\"url\"]\nbreak\nif url is None:\nraise ValueError(f\"The asset type must be in {asset_types}\")\nreturn url\n</code></pre>"},{"location":"vintersdk_doc/utils/#vintersdk.utils.VinterUrl.get_url_by_symbol","title":"get_url_by_symbol  <code>staticmethod</code>","text":"<pre><code>get_url_by_symbol(asset_type: str, symbol: str) -&gt; str\n</code></pre> <p>It takes in an asset type and a symbol and returns a url</p> <p>Parameters:</p> <ul> <li> <code>asset_type</code>             (<code>str</code>)         \u2013          <p>The type of asset you want to get data for.</p> </li> <li> <code>symbol</code>             (<code>str</code>)         \u2013          <p>The symbol of the asset you want to get data for.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>    The url is being returned.</code>         \u2013          </li> </ul> Source code in <code>vintersdk/utils.py</code> <pre><code>@staticmethod\ndef get_url_by_symbol(asset_type: str, symbol: str) -&gt; str:\n\"\"\"It takes in an asset type and a symbol and returns a url\n    Parameters\n    ----------\n    asset_type : str\n        The type of asset you want to get data for.\n    symbol : str\n        The symbol of the asset you want to get data for.\n    Returns\n    -------\n        The url is being returned.\n    \"\"\"\nsymbol, frequency = VinterValidation.validate_symbol_frequency(symbol)\nurl = VinterUrl.get_url(asset_type=asset_type, frequency=frequency)\nreturn url\n</code></pre>"},{"location":"vintersdk_doc/utils/#vintersdk.utils.VinterUrl.websocket_url","title":"websocket_url  <code>staticmethod</code>","text":"<pre><code>websocket_url(asset_type: str, symbol: str = None) -&gt; str\n</code></pre> <p>It takes in an asset type and a frequency and returns a websocket url</p> <p>Parameters:</p> <ul> <li> <code>asset_type</code>             (<code>str</code>)         \u2013          <p>The type of asset you want to get data for.</p> </li> <li> <code>symbol</code>             (<code>str</code>, default:                 <code>None</code> )         \u2013          <p>The symbol of the asset you want to get data for., optional</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>    The websocket url is being returned.</code>         \u2013          </li> </ul> Source code in <code>vintersdk/utils.py</code> <pre><code>@staticmethod\ndef websocket_url(asset_type: str, symbol: str = None) -&gt; str:\n\"\"\"It takes in an asset type and a frequency and returns a websocket url\n    Parameters\n    ----------\n    asset_type : str\n        The type of asset you want to get data for.\n    symbol : str\n        The symbol of the asset you want to get data for., optional\n    Returns\n    -------\n        The websocket url is being returned.\n    \"\"\"\nws_asset_types = [asset_type.value for asset_type in WsAssetType]\nif symbol is None:\nraise ValueError(\"The symbol must be provided.\")\nsymbol, frequency = VinterValidation.validate_symbol_frequency(symbol)\nurl = None\nfor asset_url in WsAssetUrl:\nif asset_url.value[\"asset_type\"].value == asset_type:\nurl = asset_url.value[\"url\"]\nurl = url + \"/\" + symbol\nbreak\nif url is None:\nraise ValueError(f\"The asset type must be in {ws_asset_types}\")\nreturn url\n</code></pre>"},{"location":"vintersdk_doc/utils/#vintersdk.utils.VinterValidation","title":"VinterValidation","text":"<pre><code>VinterValidation()\n</code></pre> Source code in <code>vintersdk/utils.py</code> <pre><code>def __init__(self) -&gt; None:\npass\n</code></pre>"},{"location":"vintersdk_doc/utils/#vintersdk.utils.VinterValidation.validate_api_key","title":"validate_api_key  <code>staticmethod</code>","text":"<pre><code>validate_api_key(api_key: str) -&gt; None\n</code></pre> <p>If the api key is not a string, then raise a TypeError</p> <p>Parameters:</p> <ul> <li> <code>api_key</code>             (<code>str</code>)         \u2013          <p>The api key to use to get data.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>TypeError</code>           \u2013          <p>If the api key is not a string.</p> </li> </ul> Source code in <code>vintersdk/utils.py</code> <pre><code>@staticmethod\ndef validate_api_key(api_key: str) -&gt; None:\n\"\"\"If the api key is not a string, then raise a TypeError\n    Parameters\n    ----------\n    api_key : str\n        The api key to use to get data.\n    Raises\n    ------\n    TypeError\n        If the api key is not a string.\n    \"\"\"\nif not isinstance(api_key, str):\nraise TypeError(\"The api key must be a string.\")\n</code></pre>"},{"location":"vintersdk_doc/utils/#vintersdk.utils.VinterValidation.validate_asset_type","title":"validate_asset_type  <code>staticmethod</code>","text":"<pre><code>validate_asset_type(asset_type: str) -&gt; None\n</code></pre> <p>If the asset type is not a valid asset_type , then raise a ValueError</p> <p>Parameters:</p> <ul> <li> <code>asset_type</code>             (<code>str</code>)         \u2013          <p>The type of asset you want to get data for.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ValueError</code>           \u2013          <p>If the asset type is not a valid asset type.</p> </li> </ul> Source code in <code>vintersdk/utils.py</code> <pre><code>@staticmethod\ndef validate_asset_type(asset_type: str) -&gt; None:\n\"\"\"If the asset type is not a valid asset_type , then raise a\n    ValueError\n    Parameters\n    ----------\n    asset_type : str\n        The type of asset you want to get data for.\n    Raises\n    ------\n    ValueError\n        If the asset type is not a valid asset type.\n    \"\"\"\nvalid_asset_types = [asset_type.value for asset_type in AssetType]\nif asset_type not in valid_asset_types:\nraise ValueError(\nf\"The asset type must be one of the following : {valid_asset_types}\"\n)\n</code></pre>"},{"location":"vintersdk_doc/utils/#vintersdk.utils.VinterValidation.validate_dates","title":"validate_dates  <code>staticmethod</code>","text":"<pre><code>validate_dates(dates: list) -&gt; None\n</code></pre> <p>It raises a ValueError if any of the dates in the dates list are not in the format YYYY-MM-DD</p> <p>Parameters:</p> <ul> <li> <code>dates</code>             (<code>list</code>)         \u2013          <p>A list of dates in the format YYYY-MM-DD</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ValueError</code>           \u2013          <p>If any of the dates in the dates list are not in the format YYYY-MM-DD</p> </li> </ul> Source code in <code>vintersdk/utils.py</code> <pre><code>@staticmethod\ndef validate_dates(dates: list) -&gt; None:\n\"\"\"It raises a ValueError if any of the dates in the dates list are not in the format YYYY-MM-DD\n    Parameters\n    ----------\n    dates\n        A list of dates in the format YYYY-MM-DD\n    Raises\n    ------\n    ValueError\n        If any of the dates in the dates list are not in the format YYYY-MM-DD\n    \"\"\"\nfor date in dates:\n# Validate that the date is a valid date\ntry:\ndatetime.strptime(date, \"%Y-%m-%d\")\nexcept ValueError as e:\ne.args = (\nf\"The date must be in the format YYYY-MM-DD : date {date}\"\n)\nraise\n</code></pre>"},{"location":"vintersdk_doc/utils/#vintersdk.utils.VinterValidation.validate_frequency","title":"validate_frequency  <code>staticmethod</code>","text":"<pre><code>validate_frequency(frequency: str) -&gt; None\n</code></pre> <p>If the frequency is not a valid frequency, then raise a ValueError</p> <p>Parameters:</p> <ul> <li> <code>frequency</code>             (<code>str</code>)         \u2013          <p>The frequency of the asset you want to get data for.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ValueError</code>           \u2013          <p>If the frequency is not a valid frequency.</p> </li> </ul> Source code in <code>vintersdk/utils.py</code> <pre><code>@staticmethod\ndef validate_frequency(frequency: str) -&gt; None:\n\"\"\"If the frequency is not a valid frequency, then raise a\n    ValueError\n    Parameters\n    ----------\n    frequency : str\n        The frequency of the asset you want to get data for.\n    Raises\n    ------\n    ValueError\n        If the frequency is not a valid frequency.\n    \"\"\"\nfrequencies = [frequency.value for frequency in Frequency]\nif frequency not in frequencies:\nraise ValueError(\n\"The frequency must be one of the following valid frequencies: {}\".format(\nfrequencies\n)\n)\n</code></pre>"},{"location":"vintersdk_doc/utils/#vintersdk.utils.VinterValidation.validate_symbol_frequency","title":"validate_symbol_frequency  <code>staticmethod</code>","text":"<pre><code>validate_symbol_frequency(symbol: str) -&gt; tuple\n</code></pre> <p>It takes a string, splits it on the hyphen, and validates the last part of the string</p> <p>Parameters:</p> <ul> <li> <code>symbol</code>             (<code>str</code>)         \u2013          <p>The symbol of the asset you want to get data for.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>    A tuple of the symbol and the frequency.</code>         \u2013          </li> </ul> Source code in <code>vintersdk/utils.py</code> <pre><code>@staticmethod\ndef validate_symbol_frequency(symbol: str) -&gt; tuple:\n\"\"\"It takes a string, splits it on the hyphen, and validates the last part of the string\n    Parameters\n    ----------\n    symbol : str\n        The symbol of the asset you want to get data for.\n    Returns\n    -------\n        A tuple of the symbol and the frequency.\n    \"\"\"\nif not symbol:\nraise ValueError(\"The symbol must be provided.\")\nsym_frequency = symbol.split(\"-\")[-1]\nVinterValidation.validate_frequency(sym_frequency)\nreturn symbol, sym_frequency\n</code></pre>"},{"location":"vintersdk_doc/utils/#vintersdk.utils.handle_response","title":"handle_response","text":"<pre><code>handle_response(response)\n</code></pre> <p>Raises an exception if the request fails</p> <p>Parameters:</p> <ul> <li> <code>response</code>             (<code>Response</code>)         \u2013          <p>The response from the api.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ValueError</code>           \u2013          <p>If the request fails.</p> </li> </ul> Source code in <code>vintersdk/utils.py</code> <pre><code>def handle_response(response):\n\"\"\"\n    Raises an exception if the request fails\n    Parameters\n    ----------\n    response : httpx.Response\n        The response from the api.\n    Raises\n    ------\n    ValueError\n        If the request fails.\n    \"\"\"\ntry:\nresponse.raise_for_status()  # Raise an exception if the request fails\nexcept httpx.HTTPStatusError:\nresp_json = response.json()\nraise ValueError(\nVinterError.get_error_message(\nresponse=resp_json, status_code=response.status_code\n)\n)\n</code></pre>"},{"location":"vintersdk_doc/vinter_abc/","title":"vinter_abc.py","text":""},{"location":"vintersdk_doc/vinter_abc/#vintersdk.vinter_abc","title":"vinter_abc","text":""},{"location":"vintersdk_doc/vinter_abc/#vintersdk.vinter_abc.VinterAPIABC","title":"VinterAPIABC","text":"<pre><code>VinterAPIABC(api_key: str, asset_type: str)\n</code></pre> <p>             Bases: <code>ABC</code></p> <p>Parameters:</p> <ul> <li> <code>api_key</code>             (<code>str</code>)         \u2013          <p>Your API key.</p> </li> <li> <code>asset_type</code>             (<code>AssetType(str)</code>)         \u2013          <p>The type of asset you want to get data for. The acceptable asset types listed in the AssetType enum.</p> </li> </ul> Source code in <code>vintersdk/vinter_abc.py</code> <pre><code>@abstractmethod\ndef __init__(self, api_key: str, asset_type: str):  # pragma: no cover\n\"\"\"This function takes in an api_key and asset_type and sets them as attributes of the class\n    Parameters\n    ----------\n    api_key : str\n        Your API key.\n    asset_type : AssetType (str)\n        The type of asset you want to get data for.\n        The acceptable asset types listed in the AssetType enum.\n    \"\"\"\npass\n</code></pre>"},{"location":"vintersdk_doc/vinter_abc/#vintersdk.vinter_abc.VinterAPIABC.get_active_data","title":"get_active_data  <code>abstractmethod</code>","text":"<pre><code>get_active_data(symbol: str) -&gt; dict\n</code></pre> <p>This function returns the data for the active asset</p> <p>Parameters:</p> <ul> <li> <code>symbol</code>             (<code>str</code>)         \u2013          <p>The symbol of the asset you want to get data for.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>    A dictionary of the data for the active asset</code>         \u2013          </li> </ul> Source code in <code>vintersdk/vinter_abc.py</code> <pre><code>@abstractmethod\ndef get_active_data(self, symbol: str) -&gt; dict:  # pragma: no cover\n\"\"\"This function returns the data for the active asset\n    Parameters\n    ----------\n    symbol : str\n        The symbol of the asset you want to get data for.\n    Returns\n    -------\n        A dictionary of the data for the active asset\n    \"\"\"\npass\n</code></pre>"},{"location":"vintersdk_doc/vinter_abc/#vintersdk.vinter_abc.VinterAPIABC.get_all_active_data","title":"get_all_active_data  <code>abstractmethod</code>","text":"<pre><code>get_all_active_data(\nfrequency: str = None, symbol_only: bool = False\n) -&gt; Union[list, dict]\n</code></pre> <p>This function returns a list of all the active symbols for the asset type</p> <p>Parameters:</p> <ul> <li> <code>frequency</code>             (<code>Frequency(str)</code>, default:                 <code>None</code> )         \u2013          <p>The frequency of the asset you want to get data for., by default None</p> </li> <li> <code>symbol_only</code>             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>If True, it returns a list of symbols only, by default False</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Union[list, dict]</code>         \u2013          <p>A list of data for the active symbols for the asset type</p> </li> </ul> Source code in <code>vintersdk/vinter_abc.py</code> <pre><code>@abstractmethod\ndef get_all_active_data(\nself, frequency: str = None, symbol_only: bool = False\n) -&gt; Union[list, dict]:  # pragma: no cover\n\"\"\"\n    This function returns a list of all the active symbols for the asset type\n    Parameters\n    ----------\n    frequency : Frequency (str), optional\n        The frequency of the asset you want to get data for., by default None\n    symbol_only : bool, optional\n        If True, it returns a list of symbols only, by default False\n    Returns\n    -------\n    Union[list, dict]\n        A list of data for the active symbols for the asset type\n    \"\"\"\npass\n</code></pre>"},{"location":"vintersdk_doc/vinter_abc/#vintersdk.vinter_abc.VinterAPIABC.get_data_by_date","title":"get_data_by_date  <code>abstractmethod</code>","text":"<pre><code>get_data_by_date(\nsymbol: str, date: Union[str, list]\n) -&gt; dict\n</code></pre> <p>This function takes in a symbol and a date and returns a dictionary of the data for that date</p> <p>This function is only for daily data.</p> <p>Parameters:</p> <ul> <li> <code>symbol</code>             (<code>str</code>)         \u2013          <p>The symbol of the asset you want to get data for.</p> </li> <li> <code>date</code>             (<code>str | list</code>)         \u2013          <p>The date of the data you want to get. format: YYYY-MM-DD</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>    A dictionary of the data</code>         \u2013          </li> </ul> Source code in <code>vintersdk/vinter_abc.py</code> <pre><code>@abstractmethod\ndef get_data_by_date(\nself, symbol: str, date: Union[str, list]\n) -&gt; dict:  # pragma: no cover\n\"\"\"This function takes in a symbol and a date and returns a dictionary of the data for that date\n    This function is only for daily data.\n    Parameters\n    ----------\n    symbol : str\n        The symbol of the asset you want to get data for.\n    date : str | list\n        The date of the data you want to get. format: YYYY-MM-DD\n    Returns\n    -------\n        A dictionary of the data\n    \"\"\"\npass\n</code></pre>"},{"location":"vintersdk_doc/vinter_abc/#vintersdk.vinter_abc.VinterAPIABC.get_data_by_range","title":"get_data_by_range  <code>abstractmethod</code>","text":"<pre><code>get_data_by_range(\nsymbol: str,\nstart: str,\nend: str = None,\nlimit: int = 1000,\n) -&gt; dict\n</code></pre> <p>This function takes in a symbol and a start and end date and returns a dictionary of the data for that period</p> <p>Parameters:</p> <ul> <li> <code>symbol</code>             (<code>str</code>)         \u2013          <p>The symbol of the asset you want to get data for.</p> </li> <li> <code>start</code>             (<code>str</code>)         \u2013          <p>The start datatime . format: YYYY-MM-DDTHH:MM:SSZ or YYYY-MM-DDTHH:MM:SS.sssZ</p> </li> <li> <code>end</code>             (<code>str</code>, default:                 <code>None</code> )         \u2013          <p>The end datatime. format: YYYY-MM-DDTHH:MM:SSZ or YYYY-MM-DDTHH:MM:SS.sssZ</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>    A dictionary of the data</code>         \u2013          </li> </ul> Source code in <code>vintersdk/vinter_abc.py</code> <pre><code>@abstractmethod\ndef get_data_by_range(\nself, symbol: str, start: str, end: str = None, limit: int = 1000\n) -&gt; dict:  # pragma: no cover\n\"\"\"This function takes in a symbol and a start and end date and returns a dictionary of the data\n    for that period\n    Parameters\n    ----------\n    symbol : str\n        The symbol of the asset you want to get data for.\n    start : str\n        The start datatime . format: YYYY-MM-DDTHH:MM:SSZ or YYYY-MM-DDTHH:MM:SS.sssZ\n    end : str\n        The end datatime. format: YYYY-MM-DDTHH:MM:SSZ or YYYY-MM-DDTHH:MM:SS.sssZ\n    Returns\n    -------\n        A dictionary of the data\n    \"\"\"\npass\n</code></pre>"},{"location":"vintersdk_doc/vinter_abc/#vintersdk.vinter_abc.VinterAPIABC.get_latest_data","title":"get_latest_data  <code>abstractmethod</code>","text":"<pre><code>get_latest_data(symbol: str, limit: int = 1) -&gt; dict\n</code></pre> <p>It takes a symbol and a limit as parameters, and returns a dictionary of the latest data for that symbol</p> <p>Parameters:</p> <ul> <li> <code>symbol</code>             (<code>str</code>)         \u2013          <p>The symbol of the asset you want to get data for.</p> </li> <li> <code>limit</code>             (<code>int</code>, default:                 <code>1</code> )         \u2013          <p>The number of data points to return.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>    A dictionary of the latest data for the symbol and limit.</code>         \u2013          </li> </ul> Source code in <code>vintersdk/vinter_abc.py</code> <pre><code>@abstractmethod\ndef get_latest_data(\nself, symbol: str, limit: int = 1\n) -&gt; dict:  # pragma: no cover\n\"\"\"It takes a symbol and a limit as parameters, and returns a dictionary of the latest data for\n    that symbol\n    Parameters\n    ----------\n    symbol : str\n        The symbol of the asset you want to get data for.\n    limit : int\n        The number of data points to return.\n    Returns\n    -------\n        A dictionary of the latest data for the symbol and limit.\n    \"\"\"\npass\n</code></pre>"},{"location":"vintersdk_doc/vinter_abc/#vintersdk.vinter_abc.VinterAPIABC.get_latest_value","title":"get_latest_value  <code>abstractmethod</code>","text":"<pre><code>get_latest_value(symbol: str) -&gt; float\n</code></pre> <p>This function takes in a symbol and returns the latest value for that symbol</p> <p>Parameters:</p> <ul> <li> <code>symbol</code>             (<code>str</code>)         \u2013          <p>The symbol of the asset you want to get data for.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>    The latest value for the symbol</code>         \u2013          </li> </ul> Source code in <code>vintersdk/vinter_abc.py</code> <pre><code>@abstractmethod\ndef get_latest_value(self, symbol: str) -&gt; float:  # pragma: no cover\n\"\"\"This function takes in a symbol and returns the latest value for that symbol\n    Parameters\n    ----------\n    symbol : str\n        The symbol of the asset you want to get data for.\n    Returns\n    -------\n        The latest value for the symbol\n    \"\"\"\npass\n</code></pre>"},{"location":"vintersdk_doc/vinter_abc/#vintersdk.vinter_abc.VinterAPIABC.get_multi_current_rebalance_weight","title":"get_multi_current_rebalance_weight  <code>abstractmethod</code>","text":"<pre><code>get_multi_current_rebalance_weight(symbol: str) -&gt; dict\n</code></pre> <p>This function returns the current rebalance weight of multi_assets symbol</p> <p>Returns:</p> <ul> <li> <code>    Weight of the current rebalance of the multi_assets symbol</code>         \u2013          <p>OR</p> <p>ValueError if the symbol is not a present in the list of active symbols for asset_type multi_assets</p> </li> </ul> Source code in <code>vintersdk/vinter_abc.py</code> <pre><code>@abstractmethod\ndef get_multi_current_rebalance_weight(\nself, symbol: str\n) -&gt; dict:  # pragma: no cover\n\"\"\"This function returns the current rebalance weight of multi_assets symbol\n    Returns\n    -------\n        Weight of the current rebalance of the multi_assets symbol\n        OR\n        ValueError if the symbol is not a present in the\n        list of active symbols for asset_type multi_assets\n    \"\"\"\npass\n</code></pre>"},{"location":"vintersdk_doc/vinter_abc/#vintersdk.vinter_abc.VinterAPIABC.get_multi_next_rebalance_date","title":"get_multi_next_rebalance_date  <code>abstractmethod</code>","text":"<pre><code>get_multi_next_rebalance_date(\nsymbol: str,\n) -&gt; Union[str, None]\n</code></pre> <p>This function returns the next rebalance date of multi_assets symbol</p> <p>Returns:</p> <ul> <li> <code>    Date of the next rebalance of the multi_assets symbol</code>         \u2013          <p>OR</p> <p>ValueError if the symbol is not a present in the list of active symbols for asset_type multi_assets</p> <p>OR</p> <p>None if the symbol Rebalance is not scheduled</p> </li> </ul> Source code in <code>vintersdk/vinter_abc.py</code> <pre><code>@abstractmethod\ndef get_multi_next_rebalance_date(\nself, symbol: str\n) -&gt; Union[str, None]:  # pragma: no cover\n\"\"\"This function returns the next rebalance date of multi_assets symbol\n    Returns\n    -------\n        Date of the next rebalance of the multi_assets symbol\n        OR\n        ValueError if the symbol is not a present in the\n        list of active symbols for asset_type multi_assets\n        OR\n        None if the symbol Rebalance is not scheduled\n    \"\"\"\npass\n</code></pre>"},{"location":"vintersdk_doc/vinter_abc/#vintersdk.vinter_abc.VinterAPIABC.get_multi_next_rebalance_weight","title":"get_multi_next_rebalance_weight  <code>abstractmethod</code>","text":"<pre><code>get_multi_next_rebalance_weight(\nsymbol: str,\n) -&gt; Union[str, None]\n</code></pre> <p>This function returns the next rebalance weight of multi_assets symbol</p> <p>Returns:</p> <ul> <li> <code>    Weight of the next rebalance of the multi_assets symbol</code>         \u2013          <p>OR</p> <p>ValueError if the symbol is not a present in the list of active symbols for asset_type multi_assets</p> <p>OR</p> <p>None if the symbol Rebalance is not present in the payload</p> </li> </ul> Source code in <code>vintersdk/vinter_abc.py</code> <pre><code>@abstractmethod\ndef get_multi_next_rebalance_weight(\nself, symbol: str\n) -&gt; Union[str, None]:  # pragma: no cover\n\"\"\"This function returns the next rebalance weight of multi_assets symbol\n    Returns\n    -------\n        Weight of the next rebalance of the multi_assets symbol\n        OR\n        ValueError if the symbol is not a present in the\n        list of active symbols for asset_type multi_assets\n        OR\n        None if the symbol Rebalance is not present in the payload\n    \"\"\"\npass\n</code></pre>"},{"location":"vintersdk_doc/vinter_abc/#vintersdk.vinter_abc.VinterAPIABC.get_multi_next_review_date","title":"get_multi_next_review_date  <code>abstractmethod</code>","text":"<pre><code>get_multi_next_review_date(symbol: str) -&gt; Union[str, None]\n</code></pre> <p>This function returns the next review date of multi_assets symbol</p> <p>Returns:</p> <ul> <li> <code>    Date of the next review of the multi_assets symbol</code>         \u2013          <p>OR</p> <p>ValueError if the symbol is not a present in the list of active symbols for asset_type multi_assets</p> <p>OR</p> <p>None if the symbol Review is not scheduled</p> </li> </ul> Source code in <code>vintersdk/vinter_abc.py</code> <pre><code>@abstractmethod\ndef get_multi_next_review_date(\nself, symbol: str\n) -&gt; Union[str, None]:  # pragma: no cover\n\"\"\"This function returns the next review date of multi_assets symbol\n    Returns\n    -------\n        Date of the next review of the multi_assets symbol\n        OR\n        ValueError if the symbol is not a present in the\n        list of active symbols for asset_type multi_assets\n        OR\n        None if the symbol Review is not scheduled\n    \"\"\"\npass\n</code></pre>"},{"location":"vintersdk_doc/vinter_abc/#vintersdk.vinter_abc.VinterAPIABC.get_multi_previous_rebalance_date","title":"get_multi_previous_rebalance_date  <code>abstractmethod</code>","text":"<pre><code>get_multi_previous_rebalance_date(\nsymbol: str,\n) -&gt; Union[str, None]\n</code></pre> <p>This function returns the previous rebalance date of multi_assets symbol</p> <p>Returns:</p> <ul> <li> <code>    Date of the previous rebalance of the multi_assets symbol</code>         \u2013          <p>OR</p> <p>ValueError if the symbol is not a present in the list of active symbols for asset_type multi_assets</p> <p>OR</p> <p>None if the symbol Rebalance is not scheduled</p> </li> </ul> Source code in <code>vintersdk/vinter_abc.py</code> <pre><code>@abstractmethod\ndef get_multi_previous_rebalance_date(\nself, symbol: str\n) -&gt; Union[str, None]:  # pragma: no cover\n\"\"\"This function returns the previous rebalance date of multi_assets symbol\n    Returns\n    -------\n        Date of the previous rebalance of the multi_assets symbol\n        OR\n        ValueError if the symbol is not a present in the\n        list of active symbols for asset_type multi_assets\n        OR\n        None if the symbol Rebalance is not scheduled\n    \"\"\"\npass\n</code></pre>"},{"location":"vintersdk_doc/vinter_abc/#vintersdk.vinter_abc.VinterAPIABC.get_multi_previous_review_date","title":"get_multi_previous_review_date  <code>abstractmethod</code>","text":"<pre><code>get_multi_previous_review_date(\nsymbol: str,\n) -&gt; Union[str, None]\n</code></pre> <p>This function returns the previous review date of multi_assets symbol</p> <p>Returns:</p> <ul> <li> <code>    Date of the previous review of the multi_assets symbol</code>         \u2013          <p>OR</p> <p>ValueError if the symbol is not a present in the list of active symbols for asset_type multi_assets</p> <p>OR</p> <p>None if the symbol Review is not scheduled</p> </li> </ul> Source code in <code>vintersdk/vinter_abc.py</code> <pre><code>@abstractmethod\ndef get_multi_previous_review_date(\nself, symbol: str\n) -&gt; Union[str, None]:  # pragma: no cover\n\"\"\"This function returns the previous review date of multi_assets symbol\n    Returns\n    -------\n        Date of the previous review of the multi_assets symbol\n        OR\n        ValueError if the symbol is not a present in the\n        list of active symbols for asset_type multi_assets\n        OR\n        None if the symbol Review is not scheduled\n    \"\"\"\npass\n</code></pre>"},{"location":"vintersdk_doc/vinter_abc/#vintersdk.vinter_abc.VinterAPIABC.get_single_contributions","title":"get_single_contributions  <code>abstractmethod</code>","text":"<pre><code>get_single_contributions(symbol: str) -&gt; dict\n</code></pre> <p>This function returns the contributions of the single_assets symbol</p> <p>Returns:</p> <ul> <li> <code>    A dictionary of the contributions of the single_assets symbol</code>         \u2013          <p>OR</p> <p>ValueError if the symbol is not a present in the list of active symbols for asset_type single_assets</p> </li> </ul> Source code in <code>vintersdk/vinter_abc.py</code> <pre><code>@abstractmethod\ndef get_single_contributions(\nself, symbol: str\n) -&gt; dict:  # pragma: no cover\n\"\"\"This function returns the contributions of the single_assets symbol\n    Returns\n    -------\n        A dictionary of the contributions of the single_assets symbol\n        OR\n        ValueError if the symbol is not a present in the\n        list of active symbols for asset_type single_assets\n    \"\"\"\npass\n</code></pre>"},{"location":"vintersdk_doc/vinter_sdk/","title":"VinterAPI","text":""},{"location":"vintersdk_doc/vinter_sdk/#vintersdk.vinter_sdk","title":"vinter_sdk","text":""},{"location":"vintersdk_doc/vinter_sdk/#vintersdk.vinter_sdk.VinterAPI","title":"VinterAPI","text":"<pre><code>VinterAPI(api_key: str, asset_type: AssetType)\n</code></pre> <p>             Bases: <code>VinterAPIABC</code></p> <p>Parameters:</p> <ul> <li> <code>api_key</code>             (<code>str</code>)         \u2013          <p>Your API key.</p> </li> <li> <code>asset_type</code>             (<code>AssetType(str)</code>)         \u2013          <p>The type of asset you want to get data for. The acceptable asset types listed in the AssetType enum.</p> </li> </ul> Source code in <code>vintersdk/vinter_sdk.py</code> <pre><code>def __init__(self, api_key: str, asset_type: AssetType):\n\"\"\"This function takes in an api_key and asset_type and sets them as attributes of the class\n    Parameters\n    ----------\n    api_key : str\n        Your API key.\n    asset_type : AssetType (str)\n        The type of asset you want to get data for.\n        The acceptable asset types listed in the AssetType enum.\n    \"\"\"\nself.api_key = api_key\nself.asset_type = asset_type\nself.frequencies = [frequency.value for frequency in Frequency]\nself.valid_asset_types = [asset_type.value for asset_type in AssetType]\nVinterValidation.validate_asset_type(self.asset_type)\nVinterValidation.validate_api_key(self.api_key)\nself.httpx_client = httpx.Client(follow_redirects=True, timeout=10)\nself.headers = {\n\"Authorization\": self.api_key,\n\"Service-Type\": \"vintersdk\",\n}\n</code></pre>"},{"location":"vintersdk_doc/vinter_sdk/#vintersdk.vinter_sdk.VinterAPI.get_active_data","title":"get_active_data","text":"<pre><code>get_active_data(symbol: str) -&gt; dict\n</code></pre> <p>This function returns the data for the active asset</p> <p>Parameters:</p> <ul> <li> <code>symbol</code>             (<code>str</code>)         \u2013          <p>The symbol of the asset you want to get data for.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>    A dictionary of the data for the active asset</code>         \u2013          </li> </ul> <p>Raises:</p> <ul> <li> <code>    ValueError</code>           \u2013          <p>If the symbol is not a present in the list of active symbols for the asset type</p> </li> </ul> Source code in <code>vintersdk/vinter_sdk.py</code> <pre><code>def get_active_data(self, symbol: str) -&gt; dict:\n\"\"\"This function returns the data for the active asset\n    Parameters\n    ----------\n    symbol : str\n        The symbol of the asset you want to get data for.\n    Returns\n    -------\n        A dictionary of the data for the active asset\n    Raises\n    ------\n        ValueError\n            If the symbol is not a present in the list of active symbols for the asset type\n    \"\"\"\nsymbol, frequency = VinterValidation.validate_symbol_frequency(symbol)\nurl = VinterUrl.get_active_url(self.asset_type)\nheaders = self.headers\nparameters = {\"symbol\": symbol}\nresponse = self.httpx_client.get(\nurl, headers=headers, params=parameters\n)\nhandle_response(response)\ndata = response.json()[\"data\"]\nif len(data) == 0:\nraise ValueError(\n\"No data was found for the symbol: {}\".format(symbol)\n)\nreturn data[0]\n</code></pre>"},{"location":"vintersdk_doc/vinter_sdk/#vintersdk.vinter_sdk.VinterAPI.get_all_active_data","title":"get_all_active_data","text":"<pre><code>get_all_active_data(\nfrequency: Frequency = None, symbol_only: bool = False\n) -&gt; Union[list, dict]\n</code></pre> <p>This function returns a list of all the active symbols for the asset type</p> <p>Parameters:</p> <ul> <li> <code>frequency</code>             (<code>Frequency(str)</code>, default:                 <code>None</code> )         \u2013          <p>The frequency of the asset you want to get data for., by default None</p> </li> <li> <code>symbol_only</code>             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>If True, it returns a list of symbols only, by default False</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Union[list, dict]</code>         \u2013          <p>A list of data for the active symbols for the asset type</p> </li> </ul> Source code in <code>vintersdk/vinter_sdk.py</code> <pre><code>def get_all_active_data(\nself, frequency: Frequency = None, symbol_only: bool = False\n) -&gt; Union[list, dict]:\n\"\"\"\n    This function returns a list of all the active symbols for the asset type\n    Parameters\n    ----------\n    frequency : Frequency (str), optional\n        The frequency of the asset you want to get data for., by default None\n    symbol_only : bool, optional\n        If True, it returns a list of symbols only, by default False\n    Returns\n    -------\n    Union[list, dict]\n        A list of data for the active symbols for the asset type\n    \"\"\"\nurl = VinterUrl.get_active_url(self.asset_type)\nheaders = self.headers\nresponse = self.httpx_client.get(url, headers=headers)\nhandle_response(response)\ndata = response.json()[\"data\"]\nif frequency is not None:\nVinterValidation.validate_frequency(frequency)\ndata = [\nasset\nfor asset in data\nif asset[\"symbol\"].split(\"-\")[-1] == frequency\n]\nif symbol_only:\ndata = [asset[\"symbol\"] for asset in data]\nreturn data\n</code></pre>"},{"location":"vintersdk_doc/vinter_sdk/#vintersdk.vinter_sdk.VinterAPI.get_data_by_date","title":"get_data_by_date","text":"<pre><code>get_data_by_date(symbol: str, date: str) -&gt; dict\n</code></pre> <p>This function takes in a symbol and a date and returns a dictionary of the data for that date</p> <p>Parameters:</p> <ul> <li> <code>symbol</code>             (<code>str</code>)         \u2013          <p>The symbol of the asset you want to get data for.</p> </li> <li> <code>date</code>             (<code>str</code>)         \u2013          <p>The date of the data you want to get. format: YYYY-MM-DD</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>    A dictionary of the data</code>         \u2013          </li> </ul> Source code in <code>vintersdk/vinter_sdk.py</code> <pre><code>def get_data_by_date(self, symbol: str, date: str) -&gt; dict:\n\"\"\"This function takes in a symbol and a date and returns a dictionary of the data for that date\n    Parameters\n    ----------\n    symbol : str\n        The symbol of the asset you want to get data for.\n    date : str\n        The date of the data you want to get. format: YYYY-MM-DD\n    Returns\n    -------\n        A dictionary of the data\n    \"\"\"\nsymbol, frequency = VinterValidation.validate_symbol_frequency(symbol)\nif isinstance(date, str):\ndates = [date]\n# Validate Dates with regex pattern &amp; Date validation\nVinterValidation.validate_dates(dates)\nstart_date, last_date = dates[0], dates[-1]\n# Adding 1 day to the last date to get the data for the last date\nlast_date = datetime.strptime(last_date, \"%Y-%m-%d\") + timedelta(\ndays=1\n)\n# Converting the datetime object to string\nlast_date = last_date.strftime(\"%Y-%m-%d\")\ndata = self.get_data_by_range(\nsymbol=symbol, start=start_date, end=last_date\n)\nreturn data\n</code></pre>"},{"location":"vintersdk_doc/vinter_sdk/#vintersdk.vinter_sdk.VinterAPI.get_data_by_range","title":"get_data_by_range","text":"<pre><code>get_data_by_range(\nsymbol: str,\nstart: str,\nend: str = None,\nlimit: int = 1000,\n) -&gt; dict\n</code></pre> <p>This function takes in a symbol and a start and end date and returns a dictionary of the data for that period</p> <p>Parameters:</p> <ul> <li> <code>symbol</code>             (<code>str</code>)         \u2013          <p>The symbol of the asset you want to get data for.</p> </li> <li> <code>start</code>             (<code>str</code>)         \u2013          <p>The start datatime . format:</p> <pre><code>- YYYY-MM-DD\n\n- YYYY-MM-DDTHH:MM:SSZ\n\n- YYYY-MM-DDTHH:MM:SS.fffZ\n</code></pre> </li> <li> <code>end</code>             (<code>str</code>, default:                 <code>None</code> )         \u2013          <p>The end datatime. format:</p> <pre><code>- YYYY-MM-DD\n\n- YYYY-MM-DDTHH:MM:SSZ\n\n- YYYY-MM-DDTHH:MM:SS.fffZ\n</code></pre> </li> <li> <code>limit</code>             (<code>int</code>, default:                 <code>1000</code> )         \u2013          <p>The number of data points to return.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>    A dictionary of the data</code>         \u2013          </li> </ul> Source code in <code>vintersdk/vinter_sdk.py</code> <pre><code>def get_data_by_range(\nself, symbol: str, start: str, end: str = None, limit: int = 1000\n) -&gt; dict:\n\"\"\"This function takes in a symbol and a start and end date and returns a dictionary of the data\n    for that period\n    Parameters\n    ----------\n    symbol : str\n        The symbol of the asset you want to get data for.\n    start : str\n        The start datatime . format:\n            - YYYY-MM-DD\n            - YYYY-MM-DDTHH:MM:SSZ\n            - YYYY-MM-DDTHH:MM:SS.fffZ\n    end : str\n        The end datatime. format:\n            - YYYY-MM-DD\n            - YYYY-MM-DDTHH:MM:SSZ\n            - YYYY-MM-DDTHH:MM:SS.fffZ\n    limit : int\n        The number of data points to return.\n    Returns\n    -------\n        A dictionary of the data\n    \"\"\"\nurl = VinterUrl.get_url_by_symbol(\nasset_type=self.asset_type, symbol=symbol\n)\nparams = {\n\"symbol\": symbol,\n\"start_time\": start,\n\"end_time\": end,\n\"limit\": limit,\n}\nheaders = self.headers\nresponse = self.httpx_client.get(url, params=params, headers=headers)\nhandle_response(response)\ndata = response.json()[\"data\"]\nif len(data) == 0:\nraise ValueError(\nf\"No data was found for the symbol: {symbol} between {start} and {end}.\"\n)\nreturn data\n</code></pre>"},{"location":"vintersdk_doc/vinter_sdk/#vintersdk.vinter_sdk.VinterAPI.get_latest_data","title":"get_latest_data","text":"<pre><code>get_latest_data(symbol: str, limit: int = 1) -&gt; dict\n</code></pre> <p>It takes a symbol and a limit as parameters, and returns a dictionary of the latest data for that symbol</p> <p>Parameters:</p> <ul> <li> <code>symbol</code>             (<code>str</code>)         \u2013          <p>The symbol of the asset you want to get data for.</p> </li> <li> <code>limit</code>             (<code>int</code>, default:                 <code>1</code> )         \u2013          <p>The number of data points to return.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>    A dictionary of the latest data for the symbol and limit.</code>         \u2013          </li> </ul> Source code in <code>vintersdk/vinter_sdk.py</code> <pre><code>def get_latest_data(self, symbol: str, limit: int = 1) -&gt; dict:\n\"\"\"It takes a symbol and a limit as parameters, and returns a dictionary of the latest data for\n    that symbol\n    Parameters\n    ----------\n    symbol : str\n        The symbol of the asset you want to get data for.\n    limit : int\n        The number of data points to return.\n    Returns\n    -------\n        A dictionary of the latest data for the symbol and limit.\n    \"\"\"\nurl = VinterUrl.get_url_by_symbol(self.asset_type, symbol)\nparams = {\"symbol\": symbol, \"limit\": limit}\nheaders = self.headers\nresponse = self.httpx_client.get(url, params=params, headers=headers)\nhandle_response(response)\ndata = response.json()[\"data\"]\nif len(data) == 0:\nraise ValueError(\n\"No data was found for the symbol: {}\".format(symbol)\n)\nreturn data\n</code></pre>"},{"location":"vintersdk_doc/vinter_sdk/#vintersdk.vinter_sdk.VinterAPI.get_latest_value","title":"get_latest_value","text":"<pre><code>get_latest_value(symbol: str) -&gt; float\n</code></pre> <p>This function takes in a symbol and returns the latest value for that symbol</p> <p>Parameters:</p> <ul> <li> <code>symbol</code>             (<code>str</code>)         \u2013          <p>The symbol of the asset you want to get data for.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>    The latest value for the symbol</code>         \u2013          </li> </ul> Source code in <code>vintersdk/vinter_sdk.py</code> <pre><code>def get_latest_value(self, symbol: str) -&gt; float:\n\"\"\"This function takes in a symbol and returns the latest value for that symbol\n    Parameters\n    ----------\n    symbol : str\n        The symbol of the asset you want to get data for.\n    Returns\n    -------\n        The latest value for the symbol\n    \"\"\"\ninvalid_asset_type_for_value_request = [AssetType.NAV.value]\nif self.asset_type in invalid_asset_type_for_value_request:\nraise ValueError(\nf\"The asset type {self.asset_type} is not supported for this function\"\n)\ndata = self.get_latest_data(symbol=symbol)\nreturn data[0][\"value\"]\n</code></pre>"},{"location":"vintersdk_doc/vinter_sdk/#vintersdk.vinter_sdk.VinterAPI.get_multi_current_rebalance_weight","title":"get_multi_current_rebalance_weight","text":"<pre><code>get_multi_current_rebalance_weight(symbol: str) -&gt; dict\n</code></pre> <p>This function returns the current rebalance weight of multi_assets symbol</p> <p>Requires the asset_type to be multi_assets</p> <p>Returns:</p> <ul> <li> <code>    Weight of the current rebalance of the multi_assets symbol</code>         \u2013          </li> </ul> <p>Raises:</p> <ul> <li> <code>    ValueError</code>           \u2013          <p>If the symbol is not a present in the list of active symbols for asset_type multi_assets</p> </li> </ul> Source code in <code>vintersdk/vinter_sdk.py</code> <pre><code>def get_multi_current_rebalance_weight(self, symbol: str) -&gt; dict:\n\"\"\"\n    This function returns the current rebalance weight of multi_assets symbol\n    Requires the asset_type to be multi_assets\n    Returns\n    -------\n        Weight of the current rebalance of the multi_assets symbol\n    Raises\n    ------\n        ValueError\n            If the symbol is not a present in the list of active symbols for asset_type multi_assets\n    \"\"\"\nif self.asset_type != AssetType.MULTI_ASSET.value:\nraise ValueError(\nf\"The asset type must be {AssetType.MULTI_ASSET.value} to use this function\"\n)\noutput = \"\"\ndata = self.get_active_data(symbol=symbol)\noutput = data.get(\"weights\", None)\nif output is None or output == \"\":\nraise ValueError(\n\"No data was found for the symbol: {}\".format(symbol)\n)\nreturn output\n</code></pre>"},{"location":"vintersdk_doc/vinter_sdk/#vintersdk.vinter_sdk.VinterAPI.get_multi_next_rebalance_date","title":"get_multi_next_rebalance_date","text":"<pre><code>get_multi_next_rebalance_date(\nsymbol: str,\n) -&gt; Union[str, None]\n</code></pre> <p>This function returns the next rebalance date of multi_assets symbol</p> <p>Returns:</p> <ul> <li> <code>    Date of the next rebalance of the multi_assets symbol</code>         \u2013          <p>OR</p> <p>None if the symbol Rebalance is not scheduled</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>    ValueError</code>           \u2013          <p>If the symbol is not a present in the list of active symbols for asset_type multi_assets</p> </li> </ul> Source code in <code>vintersdk/vinter_sdk.py</code> <pre><code>def get_multi_next_rebalance_date(self, symbol: str) -&gt; Union[str, None]:\n\"\"\"This function returns the next rebalance date of multi_assets symbol\n    Returns\n    -------\n        Date of the next rebalance of the multi_assets symbol\n        OR\n        None if the symbol Rebalance is not scheduled\n    Raises\n    ------\n        ValueError\n            If the symbol is not a present in the list of active symbols for asset_type multi_assets\n    \"\"\"\nif self.asset_type != AssetType.MULTI_ASSET.value:\nraise ValueError(\nf\"The asset type must be {AssetType.MULTI_ASSET.value} to use this function\"\n)\noutput = \"\"\ndata = self.get_active_data(symbol=symbol)\noutput = data.get(\"next_rebalance_date\", None)\nreturn output\n</code></pre>"},{"location":"vintersdk_doc/vinter_sdk/#vintersdk.vinter_sdk.VinterAPI.get_multi_next_rebalance_weight","title":"get_multi_next_rebalance_weight","text":"<pre><code>get_multi_next_rebalance_weight(\nsymbol: str,\n) -&gt; Union[str, None]\n</code></pre> <p>This function returns the next rebalance weight of multi_assets symbol</p> <p>Returns:</p> <ul> <li> <code>    Weight of the next rebalance of the multi_assets symbol</code>         \u2013          <p>OR</p> <p>None if the symbol Rebalance is not present in the payload</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>    ValueError</code>           \u2013          <p>If the symbol is not a present in the list of active symbols for asset_type multi_assets</p> </li> </ul> Source code in <code>vintersdk/vinter_sdk.py</code> <pre><code>def get_multi_next_rebalance_weight(self, symbol: str) -&gt; Union[str, None]:\n\"\"\"This function returns the next rebalance weight of multi_assets symbol\n    Returns\n    -------\n        Weight of the next rebalance of the multi_assets symbol\n        OR\n        None if the symbol Rebalance is not present in the payload\n    Raises\n    ------\n        ValueError\n            If the symbol is not a present in the list of active symbols for asset_type multi_assets\n    \"\"\"\nif self.asset_type != AssetType.MULTI_ASSET.value:\nraise ValueError(\nf\"The asset type must be {AssetType.MULTI_ASSET.value} to use this function\"\n)\noutput = \"\"\ndata = self.get_active_data(symbol=symbol)\noutput = data.get(\"next_rebalance_weights\", None)\nreturn output\n</code></pre>"},{"location":"vintersdk_doc/vinter_sdk/#vintersdk.vinter_sdk.VinterAPI.get_multi_next_review_date","title":"get_multi_next_review_date","text":"<pre><code>get_multi_next_review_date(symbol: str) -&gt; Union[str, None]\n</code></pre> <p>This function returns the next review date of multi_assets symbol</p> <p>Returns:</p> <ul> <li> <code>    Date of the next review of the multi_assets symbol</code>         \u2013          <p>OR</p> <p>None if the symbol Review is not scheduled</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>    ValueError</code>           \u2013          <p>If the symbol is not a present in the list of active symbols for asset_type multi_assets</p> </li> </ul> Source code in <code>vintersdk/vinter_sdk.py</code> <pre><code>def get_multi_next_review_date(self, symbol: str) -&gt; Union[str, None]:\n\"\"\"This function returns the next review date of multi_assets symbol\n    Returns\n    -------\n        Date of the next review of the multi_assets symbol\n        OR\n        None if the symbol Review is not scheduled\n    Raises\n    ------\n        ValueError\n            If the symbol is not a present in the list of active symbols for asset_type multi_assets\n    \"\"\"\nif self.asset_type != AssetType.MULTI_ASSET.value:\nraise ValueError(\nf\"The asset type must be {AssetType.MULTI_ASSET.value} to use this function\"\n)\noutput = \"\"\ndata = self.get_active_data(symbol=symbol)\noutput = data.get(\"next_review_date\", None)\nreturn output\n</code></pre>"},{"location":"vintersdk_doc/vinter_sdk/#vintersdk.vinter_sdk.VinterAPI.get_multi_previous_rebalance_date","title":"get_multi_previous_rebalance_date","text":"<pre><code>get_multi_previous_rebalance_date(\nsymbol: str,\n) -&gt; Union[str, None]\n</code></pre> <p>This function returns the previous rebalance date of multi_assets symbol</p> <p>Returns:</p> <ul> <li> <code>    Date of the previous rebalance of the multi_assets symbol</code>         \u2013          <p>OR</p> <p>None if the symbol Rebalance is not present in the payload</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>    ValueError</code>           \u2013          <p>If the symbol is not a present in the list of active symbols for asset_type multi_assets</p> </li> </ul> Source code in <code>vintersdk/vinter_sdk.py</code> <pre><code>def get_multi_previous_rebalance_date(\nself, symbol: str\n) -&gt; Union[str, None]:\n\"\"\"This function returns the previous rebalance date of multi_assets symbol\n    Returns\n    -------\n        Date of the previous rebalance of the multi_assets symbol\n        OR\n        None if the symbol Rebalance is not present in the payload\n    Raises\n    ------\n        ValueError\n            If the symbol is not a present in the list of active symbols for asset_type multi_assets\n    \"\"\"\nif self.asset_type != AssetType.MULTI_ASSET.value:\nraise ValueError(\nf\"The asset type must be {AssetType.MULTI_ASSET.value} to use this function\"\n)\noutput = \"\"\ndata = self.get_active_data(symbol=symbol)\noutput = data.get(\"previous_rebalance_date\", None)\nreturn output\n</code></pre>"},{"location":"vintersdk_doc/vinter_sdk/#vintersdk.vinter_sdk.VinterAPI.get_multi_previous_review_date","title":"get_multi_previous_review_date","text":"<pre><code>get_multi_previous_review_date(\nsymbol: str,\n) -&gt; Union[str, None]\n</code></pre> <p>This function returns the previous review date of multi_assets symbol</p> <p>Returns:</p> <ul> <li> <code>    Date of the previous review of the multi_assets symbol</code>         \u2013          <p>OR</p> <p>None if the symbol Review is not present in the payload</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>    ValueError</code>           \u2013          <p>If the symbol is not a present in the list of active symbols for asset_type multi_assets</p> </li> </ul> Source code in <code>vintersdk/vinter_sdk.py</code> <pre><code>def get_multi_previous_review_date(self, symbol: str) -&gt; Union[str, None]:\n\"\"\"This function returns the previous review date of multi_assets symbol\n    Returns\n    -------\n        Date of the previous review of the multi_assets symbol\n        OR\n        None if the symbol Review is not present in the payload\n    Raises\n    ------\n        ValueError\n            If the symbol is not a present in the list of active symbols for asset_type multi_assets\n    \"\"\"\nif self.asset_type != AssetType.MULTI_ASSET.value:\nraise ValueError(\nf\"The asset type must be {AssetType.MULTI_ASSET.value} to use this function\"\n)\noutput = \"\"\ndata = self.get_active_data(symbol=symbol)\noutput = data.get(\"previous_review_date\", None)\nreturn output\n</code></pre>"},{"location":"vintersdk_doc/vinter_sdk/#vintersdk.vinter_sdk.VinterAPI.get_single_contributions","title":"get_single_contributions","text":"<pre><code>get_single_contributions(symbol: str) -&gt; dict\n</code></pre> <p>This function returns the contributions of the single_assets symbol</p> <p>Returns:</p> <ul> <li> <code>    A dictionary of the contributions of the single_assets symbol</code>         \u2013          </li> </ul> <p>Raises:</p> <ul> <li> <code>    ValueError</code>           \u2013          <p>If the symbol is not a present in the list of active symbols for asset_type single_assets</p> </li> </ul> Source code in <code>vintersdk/vinter_sdk.py</code> <pre><code>def get_single_contributions(self, symbol: str) -&gt; dict:\n\"\"\"This function returns the contributions of the single_assets symbol\n    Returns\n    -------\n        A dictionary of the contributions of the single_assets symbol\n    Raises\n    ------\n        ValueError\n            If the symbol is not a present in the list of active symbols for asset_type single_assets\n    \"\"\"\nif self.asset_type != AssetType.SINGLE_ASSET.value:\nraise ValueError(\nf\"The asset type must be {AssetType.SINGLE_ASSET.value} to use this function\"\n)\noutput = \"\"\ndata = self.get_active_data(symbol=symbol)\noutput = data.get(\"contrib\", None)\nif output == \"\" or output is None:\nraise ValueError(\nf\"The symbol {symbol} does not have any contributions associated with it.\"\n)\nreturn output\n</code></pre>"},{"location":"vintersdk_doc/vinter_sdk_async/","title":"VinterAPIAsync","text":""},{"location":"vintersdk_doc/vinter_sdk_async/#vintersdk.vinter_sdk_async","title":"vinter_sdk_async","text":""},{"location":"vintersdk_doc/vinter_sdk_async/#vintersdk.vinter_sdk_async.VinterAPIAsync","title":"VinterAPIAsync","text":"<pre><code>VinterAPIAsync(api_key: str, asset_type: str)\n</code></pre> <p>             Bases: <code>VinterAPIABC</code></p> <p>Parameters:</p> <ul> <li> <code>api_key</code>             (<code>str</code>)         \u2013          <p>Your API key.</p> </li> <li> <code>asset_type</code>             (<code>AssetType(str)</code>)         \u2013          <p>The type of asset you want to get data for. The acceptable asset types listed in the AssetType enum.</p> </li> </ul> Source code in <code>vintersdk/vinter_sdk_async.py</code> <pre><code>def __init__(self, api_key: str, asset_type: str):\n\"\"\"This function takes in an api_key and asset_type and sets them as attributes of the class\n    Parameters\n    ----------\n    api_key : str\n        Your API key.\n    asset_type : AssetType (str)\n        The type of asset you want to get data for.\n        The acceptable asset types listed in the AssetType enum.\n    \"\"\"\nself.api_key = api_key\nself.asset_type = asset_type\nself.frequencies = [frequency.value for frequency in Frequency]\nself.valid_asset_types = [asset_type.value for asset_type in AssetType]\nVinterValidation.validate_asset_type(self.asset_type)\nVinterValidation.validate_api_key(self.api_key)\nself.httpx_client = httpx.AsyncClient(\nfollow_redirects=True, timeout=10\n)\nself.headers = {\n\"Authorization\": self.api_key,\n\"Service-Type\": \"vintersdk\",\n}\n</code></pre>"},{"location":"vintersdk_doc/vinter_sdk_async/#vintersdk.vinter_sdk_async.VinterAPIAsync.get_active_data","title":"get_active_data  <code>async</code>","text":"<pre><code>get_active_data(symbol: str) -&gt; dict\n</code></pre> <p>This function returns the data for the active asset</p> <p>Parameters:</p> <ul> <li> <code>symbol</code>             (<code>str</code>)         \u2013          <p>The symbol of the asset you want to get data for.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>    A dictionary of the data for the active asset</code>         \u2013          </li> </ul> <p>Raises:</p> <ul> <li> <code>    ValueError</code>           \u2013          <p>If the symbol is not a present in the list of active symbols for the asset type</p> </li> </ul> Source code in <code>vintersdk/vinter_sdk_async.py</code> <pre><code>async def get_active_data(self, symbol: str) -&gt; dict:\n\"\"\"This function returns the data for the active asset\n    Parameters\n    ----------\n    symbol : str\n        The symbol of the asset you want to get data for.\n    Returns\n    -------\n        A dictionary of the data for the active asset\n    Raises\n    ------\n        ValueError\n            If the symbol is not a present in the list of active symbols for the asset type\n    \"\"\"\nurl = VinterUrl.get_active_url(self.asset_type)\nheaders = self.headers\nresponse = await self.httpx_client.get(url, headers=headers)\nhandle_response(response)\ndata = response.json()[\"data\"]\nif len(data) == 0:\nraise ValueError(\n\"No data was found for the symbol: {}\".format(symbol)\n)\nreturn data[0]\n</code></pre>"},{"location":"vintersdk_doc/vinter_sdk_async/#vintersdk.vinter_sdk_async.VinterAPIAsync.get_all_active_data","title":"get_all_active_data  <code>async</code>","text":"<pre><code>get_all_active_data(\nfrequency: str = None, symbol_only: bool = False\n) -&gt; Union[list, dict]\n</code></pre> <p>This function returns a list of all the active symbols for the asset type</p> <p>Parameters:</p> <ul> <li> <code>frequency</code>             (<code>Frequency(str)</code>, default:                 <code>None</code> )         \u2013          <p>The frequency of the asset you want to get data for., by default None</p> </li> <li> <code>symbol_only</code>             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>If True, it returns a list of symbols only, by default False</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Union[list, dict]</code>         \u2013          <p>A list of data for the active symbols for the asset type</p> </li> </ul> Source code in <code>vintersdk/vinter_sdk_async.py</code> <pre><code>async def get_all_active_data(\nself, frequency: str = None, symbol_only: bool = False\n) -&gt; Union[list, dict]:\n\"\"\"\n    This function returns a list of all the active symbols for the asset type\n    Parameters\n    ----------\n    frequency : Frequency (str), optional\n        The frequency of the asset you want to get data for., by default None\n    symbol_only : bool, optional\n        If True, it returns a list of symbols only, by default False\n    Returns\n    -------\n    Union[list, dict]\n        A list of data for the active symbols for the asset type\n    \"\"\"\nurl = VinterUrl.get_active_url(self.asset_type)\nheaders = self.headers\nresponse = await self.httpx_client.get(url, headers=headers)\nhandle_response(response)\ndata = response.json()[\"data\"]\nif frequency is not None:\nVinterValidation.validate_frequency(frequency)\ndata = [\nasset\nfor asset in data\nif asset[\"symbol\"].split(\"-\")[-1] == frequency\n]\nif symbol_only:\ndata = [asset[\"symbol\"] for asset in data]\nreturn data\n</code></pre>"},{"location":"vintersdk_doc/vinter_sdk_async/#vintersdk.vinter_sdk_async.VinterAPIAsync.get_data_by_date","title":"get_data_by_date  <code>async</code>","text":"<pre><code>get_data_by_date(symbol: str, date: str) -&gt; dict\n</code></pre> <p>This function takes in a symbol and a date and returns a dictionary of the data for that date</p> <p>Parameters:</p> <ul> <li> <code>symbol</code>             (<code>str</code>)         \u2013          <p>The symbol of the asset you want to get data for.</p> </li> <li> <code>date</code>             (<code>str</code>)         \u2013          <p>The date of the data you want to get. format: YYYY-MM-DD</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>    A dictionary of the data</code>         \u2013          </li> </ul> Source code in <code>vintersdk/vinter_sdk_async.py</code> <pre><code>async def get_data_by_date(self, symbol: str, date: str) -&gt; dict:\n\"\"\"This function takes in a symbol and a date and returns a dictionary of the data for that date\n    Parameters\n    ----------\n    symbol : str\n        The symbol of the asset you want to get data for.\n    date : str\n        The date of the data you want to get. format: YYYY-MM-DD\n    Returns\n    -------\n        A dictionary of the data\n    \"\"\"\nsymbol, frequency = VinterValidation.validate_symbol_frequency(symbol)\nif isinstance(date, str):\ndates = [date]\n# Validate Dates with regex pattern &amp; Date validation\nVinterValidation.validate_dates(dates)\nstart_date, last_date = dates[0], dates[-1]\n# Adding 1 day to the last date to get the data for the last date\nlast_date = datetime.strptime(last_date, \"%Y-%m-%d\") + timedelta(\ndays=1\n)\n# Converting the datetime object to string\nlast_date = last_date.strftime(\"%Y-%m-%d\")\ndata = await self.get_data_by_range(\nsymbol=symbol, start=start_date, end=last_date\n)\nreturn data\n</code></pre>"},{"location":"vintersdk_doc/vinter_sdk_async/#vintersdk.vinter_sdk_async.VinterAPIAsync.get_data_by_range","title":"get_data_by_range  <code>async</code>","text":"<pre><code>get_data_by_range(\nsymbol: str,\nstart: str,\nend: str = None,\nlimit: int = 1000,\n) -&gt; dict\n</code></pre> <p>This function takes in a symbol and a start and end date and returns a dictionary of the data for that period</p> <p>Parameters:</p> <ul> <li> <code>symbol</code>             (<code>str</code>)         \u2013          <p>The symbol of the asset you want to get data for.</p> </li> <li> <code>start</code>             (<code>str</code>)         \u2013          <p>The start datatime . format:</p> <pre><code>- YYYY-MM-DD\n\n- YYYY-MM-DDTHH:MM:SSZ\n\n- YYYY-MM-DDTHH:MM:SS.fffZ\n</code></pre> </li> <li> <code>end</code>             (<code>str</code>, default:                 <code>None</code> )         \u2013          <p>The end datatime. format:</p> <pre><code>- YYYY-MM-DD\n\n- YYYY-MM-DDTHH:MM:SSZ\n\n- YYYY-MM-DDTHH:MM:SS.fffZ\n</code></pre> </li> <li> <code>limit</code>             (<code>int</code>, default:                 <code>1000</code> )         \u2013          <p>The number of data points to return.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>    A dictionary of the data</code>         \u2013          </li> </ul> Source code in <code>vintersdk/vinter_sdk_async.py</code> <pre><code>async def get_data_by_range(\nself, symbol: str, start: str, end: str = None, limit: int = 1000\n) -&gt; dict:\n\"\"\"This function takes in a symbol and a start and end date and returns a dictionary of the data\n    for that period\n    Parameters\n    ----------\n    symbol : str\n        The symbol of the asset you want to get data for.\n    start : str\n        The start datatime . format:\n            - YYYY-MM-DD\n            - YYYY-MM-DDTHH:MM:SSZ\n            - YYYY-MM-DDTHH:MM:SS.fffZ\n    end : str\n        The end datatime. format:\n            - YYYY-MM-DD\n            - YYYY-MM-DDTHH:MM:SSZ\n            - YYYY-MM-DDTHH:MM:SS.fffZ\n    limit : int\n        The number of data points to return.\n    Returns\n    -------\n        A dictionary of the data\n    \"\"\"\nurl = VinterUrl.get_url_by_symbol(\nasset_type=self.asset_type, symbol=symbol\n)\nparams = {\n\"symbol\": symbol,\n\"start_time\": start,\n\"end_time\": end,\n\"limit\": limit,\n}\nheaders = self.headers\nresponse = await self.httpx_client.get(\nurl, params=params, headers=headers\n)\nhandle_response(response)\ndata = response.json()[\"data\"]\nif len(data) == 0:\nraise ValueError(\nf\"No data was found for the symbol: {symbol} between {start} and {end}.\"\n)\nreturn data\n</code></pre>"},{"location":"vintersdk_doc/vinter_sdk_async/#vintersdk.vinter_sdk_async.VinterAPIAsync.get_latest_data","title":"get_latest_data  <code>async</code>","text":"<pre><code>get_latest_data(symbol: str, limit: int = 1) -&gt; dict\n</code></pre> <p>It takes a symbol and a limit as parameters, and returns a dictionary of the latest data for that symbol</p> <p>Parameters:</p> <ul> <li> <code>symbol</code>             (<code>str</code>)         \u2013          <p>The symbol of the asset you want to get data for.</p> </li> <li> <code>limit</code>             (<code>int</code>, default:                 <code>1</code> )         \u2013          <p>The number of data points to return.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>    A dictionary of the latest data for the symbol and limit.</code>         \u2013          </li> </ul> Source code in <code>vintersdk/vinter_sdk_async.py</code> <pre><code>async def get_latest_data(self, symbol: str, limit: int = 1) -&gt; dict:\n\"\"\"It takes a symbol and a limit as parameters, and returns a dictionary of the latest data for\n    that symbol\n    Parameters\n    ----------\n    symbol : str\n        The symbol of the asset you want to get data for.\n    limit : int\n        The number of data points to return.\n    Returns\n    -------\n        A dictionary of the latest data for the symbol and limit.\n    \"\"\"\nurl = VinterUrl.get_url_by_symbol(self.asset_type, symbol)\nparams = {\"symbol\": symbol, \"limit\": limit}\nheaders = self.headers\nresponse = await self.httpx_client.get(\nurl, params=params, headers=headers\n)\nhandle_response(response)\ndata = response.json()[\"data\"]\nif len(data) == 0:\nraise ValueError(\n\"No data was found for the symbol: {}\".format(symbol)\n)\nreturn data\n</code></pre>"},{"location":"vintersdk_doc/vinter_sdk_async/#vintersdk.vinter_sdk_async.VinterAPIAsync.get_latest_value","title":"get_latest_value  <code>async</code>","text":"<pre><code>get_latest_value(symbol: str) -&gt; float\n</code></pre> <p>This function takes in a symbol and returns the latest value for that symbol</p> <p>Parameters:</p> <ul> <li> <code>symbol</code>             (<code>str</code>)         \u2013          <p>The symbol of the asset you want to get data for.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>    The latest value for the symbol</code>         \u2013          </li> </ul> Source code in <code>vintersdk/vinter_sdk_async.py</code> <pre><code>async def get_latest_value(self, symbol: str) -&gt; float:\n\"\"\"This function takes in a symbol and returns the latest value for that symbol\n    Parameters\n    ----------\n    symbol : str\n        The symbol of the asset you want to get data for.\n    Returns\n    -------\n        The latest value for the symbol\n    \"\"\"\ndata = await self.get_latest_data(symbol=symbol)\nreturn data[0][\"value\"]\n</code></pre>"},{"location":"vintersdk_doc/vinter_sdk_async/#vintersdk.vinter_sdk_async.VinterAPIAsync.get_multi_current_rebalance_weight","title":"get_multi_current_rebalance_weight  <code>async</code>","text":"<pre><code>get_multi_current_rebalance_weight(symbol: str) -&gt; dict\n</code></pre> <p>This function returns the current rebalance weight of multi_assets symbol</p> <p>Requires the asset_type to be multi_assets</p> <p>Returns:</p> <ul> <li> <code>    Weight of the current rebalance of the multi_assets symbol</code>         \u2013          </li> </ul> <p>Raises:</p> <ul> <li> <code>    ValueError</code>           \u2013          <p>If the symbol is not a present in the list of active symbols for asset_type multi_assets</p> </li> </ul> Source code in <code>vintersdk/vinter_sdk_async.py</code> <pre><code>async def get_multi_current_rebalance_weight(self, symbol: str) -&gt; dict:\n\"\"\"\n    This function returns the current rebalance weight of multi_assets symbol\n    Requires the asset_type to be multi_assets\n    Returns\n    -------\n        Weight of the current rebalance of the multi_assets symbol\n    Raises\n    ------\n        ValueError\n            If the symbol is not a present in the list of active symbols for asset_type multi_assets\n    \"\"\"\nif self.asset_type != AssetType.MULTI_ASSET.value:\nraise ValueError(\nf\"The asset type must be {AssetType.MULTI_ASSET.value} to use this function\"\n)\noutput = \"\"\ndata = await self.get_active_data(symbol=symbol)\noutput = data.get(\"weights\", None)\nif output is None or output == \"\":\nraise ValueError(\n\"No data was found for the symbol: {}\".format(symbol)\n)\nreturn output\n</code></pre>"},{"location":"vintersdk_doc/vinter_sdk_async/#vintersdk.vinter_sdk_async.VinterAPIAsync.get_multi_next_rebalance_date","title":"get_multi_next_rebalance_date  <code>async</code>","text":"<pre><code>get_multi_next_rebalance_date(\nsymbol: str,\n) -&gt; Union[str, None]\n</code></pre> <p>This function returns the next rebalance date of multi_assets symbol</p> <p>Returns:</p> <ul> <li> <code>    Date of the next rebalance of the multi_assets symbol</code>         \u2013          <p>OR</p> <p>None if the symbol Rebalance is not scheduled</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>    ValueError</code>           \u2013          <p>If the symbol is not a present in the list of active symbols for asset_type multi_assets</p> </li> </ul> Source code in <code>vintersdk/vinter_sdk_async.py</code> <pre><code>async def get_multi_next_rebalance_date(\nself, symbol: str\n) -&gt; Union[str, None]:\n\"\"\"This function returns the next rebalance date of multi_assets symbol\n    Returns\n    -------\n        Date of the next rebalance of the multi_assets symbol\n        OR\n        None if the symbol Rebalance is not scheduled\n    Raises\n    ------\n        ValueError\n            If the symbol is not a present in the list of active symbols for asset_type multi_assets\n    \"\"\"\nif self.asset_type != AssetType.MULTI_ASSET.value:\nraise ValueError(\nf\"The asset type must be {AssetType.MULTI_ASSET.value} to use this function\"\n)\noutput = \"\"\ndata = await self.get_active_data(symbol=symbol)\noutput = data.get(\"next_rebalance_date\", None)\nreturn output\n</code></pre>"},{"location":"vintersdk_doc/vinter_sdk_async/#vintersdk.vinter_sdk_async.VinterAPIAsync.get_multi_next_rebalance_weight","title":"get_multi_next_rebalance_weight  <code>async</code>","text":"<pre><code>get_multi_next_rebalance_weight(\nsymbol: str,\n) -&gt; Union[str, None]\n</code></pre> <p>This function returns the next rebalance weight of multi_assets symbol</p> <p>Returns:</p> <ul> <li> <code>    Weight of the next rebalance of the multi_assets symbol</code>         \u2013          <p>OR</p> <p>None if the symbol Rebalance is not present in the payload</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>    ValueError</code>           \u2013          <p>If the symbol is not a present in the list of active symbols for asset_type multi_assets</p> </li> </ul> Source code in <code>vintersdk/vinter_sdk_async.py</code> <pre><code>async def get_multi_next_rebalance_weight(\nself, symbol: str\n) -&gt; Union[str, None]:\n\"\"\"This function returns the next rebalance weight of multi_assets symbol\n    Returns\n    -------\n        Weight of the next rebalance of the multi_assets symbol\n        OR\n        None if the symbol Rebalance is not present in the payload\n    Raises\n    ------\n        ValueError\n            If the symbol is not a present in the list of active symbols for asset_type multi_assets\n    \"\"\"\nif self.asset_type != AssetType.MULTI_ASSET.value:\nraise ValueError(\nf\"The asset type must be {AssetType.MULTI_ASSET.value} to use this function\"\n)\noutput = \"\"\ndata = await self.get_active_data(symbol=symbol)\noutput = data.get(\"next_rebalance_weights\", None)\nreturn output\n</code></pre>"},{"location":"vintersdk_doc/vinter_sdk_async/#vintersdk.vinter_sdk_async.VinterAPIAsync.get_multi_next_review_date","title":"get_multi_next_review_date  <code>async</code>","text":"<pre><code>get_multi_next_review_date(symbol: str) -&gt; Union[str, None]\n</code></pre> <p>This function returns the next review date of multi_assets symbol</p> <p>Returns:</p> <ul> <li> <code>    Date of the next review of the multi_assets symbol</code>         \u2013          <p>OR</p> <p>None if the symbol Review is not scheduled</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>    ValueError</code>           \u2013          <p>If the symbol is not a present in the list of active symbols for asset_type multi_assets</p> </li> </ul> Source code in <code>vintersdk/vinter_sdk_async.py</code> <pre><code>async def get_multi_next_review_date(\nself, symbol: str\n) -&gt; Union[str, None]:\n\"\"\"This function returns the next review date of multi_assets symbol\n    Returns\n    -------\n        Date of the next review of the multi_assets symbol\n        OR\n        None if the symbol Review is not scheduled\n    Raises\n    ------\n        ValueError\n            If the symbol is not a present in the list of active symbols for asset_type multi_assets\n    \"\"\"\nif self.asset_type != AssetType.MULTI_ASSET.value:\nraise ValueError(\nf\"The asset type must be {AssetType.MULTI_ASSET.value} to use this function\"\n)\noutput = \"\"\ndata = await self.get_active_data(symbol=symbol)\noutput = data.get(\"next_review_date\", None)\nreturn output\n</code></pre>"},{"location":"vintersdk_doc/vinter_sdk_async/#vintersdk.vinter_sdk_async.VinterAPIAsync.get_multi_previous_rebalance_date","title":"get_multi_previous_rebalance_date  <code>async</code>","text":"<pre><code>get_multi_previous_rebalance_date(\nsymbol: str,\n) -&gt; Union[str, None]\n</code></pre> <p>This function returns the previous rebalance date of multi_assets symbol</p> <p>Returns:</p> <ul> <li> <code>    Date of the previous rebalance of the multi_assets symbol</code>         \u2013          <p>OR</p> <p>None if the symbol Rebalance is not present in the payload</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>    ValueError</code>           \u2013          <p>If the symbol is not a present in the list of active symbols for asset_type multi_assets</p> </li> </ul> Source code in <code>vintersdk/vinter_sdk_async.py</code> <pre><code>async def get_multi_previous_rebalance_date(\nself, symbol: str\n) -&gt; Union[str, None]:\n\"\"\"This function returns the previous rebalance date of multi_assets symbol\n    Returns\n    -------\n        Date of the previous rebalance of the multi_assets symbol\n        OR\n        None if the symbol Rebalance is not present in the payload\n    Raises\n    ------\n        ValueError\n            If the symbol is not a present in the list of active symbols for asset_type multi_assets\n    \"\"\"\nif self.asset_type != AssetType.MULTI_ASSET.value:\nraise ValueError(\nf\"The asset type must be {AssetType.MULTI_ASSET.value} to use this function\"\n)\noutput = \"\"\ndata = await self.get_active_data(symbol=symbol)\noutput = data.get(\"previous_rebalance_date\", None)\nreturn output\n</code></pre>"},{"location":"vintersdk_doc/vinter_sdk_async/#vintersdk.vinter_sdk_async.VinterAPIAsync.get_multi_previous_review_date","title":"get_multi_previous_review_date  <code>async</code>","text":"<pre><code>get_multi_previous_review_date(\nsymbol: str,\n) -&gt; Union[str, None]\n</code></pre> <p>This function returns the previous review date of multi_assets symbol</p> <p>Returns:</p> <ul> <li> <code>    Date of the previous review of the multi_assets symbol</code>         \u2013          <p>OR</p> <p>None if the symbol Review is not present in the payload</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>    ValueError</code>           \u2013          <p>If the symbol is not a present in the list of active symbols for asset_type multi_assets</p> </li> </ul> Source code in <code>vintersdk/vinter_sdk_async.py</code> <pre><code>async def get_multi_previous_review_date(\nself, symbol: str\n) -&gt; Union[str, None]:\n\"\"\"This function returns the previous review date of multi_assets symbol\n    Returns\n    -------\n        Date of the previous review of the multi_assets symbol\n        OR\n        None if the symbol Review is not present in the payload\n    Raises\n    ------\n        ValueError\n            If the symbol is not a present in the list of active symbols for asset_type multi_assets\n    \"\"\"\nif self.asset_type != AssetType.MULTI_ASSET.value:\nraise ValueError(\nf\"The asset type must be {AssetType.MULTI_ASSET.value} to use this function\"\n)\noutput = \"\"\ndata = await self.get_active_data(symbol=symbol)\noutput = data.get(\"previous_review_date\", None)\nreturn output\n</code></pre>"},{"location":"vintersdk_doc/vinter_sdk_async/#vintersdk.vinter_sdk_async.VinterAPIAsync.get_single_contributions","title":"get_single_contributions  <code>async</code>","text":"<pre><code>get_single_contributions(symbol: str) -&gt; dict\n</code></pre> <p>This function returns the contributions of the single_assets symbol</p> <p>Returns:</p> <ul> <li> <code>    A dictionary of the contributions of the single_assets symbol</code>         \u2013          <p>OR</p> <p>ValueError if the symbol is not a present in the list of active symbols for asset_type single_assets</p> </li> </ul> Source code in <code>vintersdk/vinter_sdk_async.py</code> <pre><code>async def get_single_contributions(self, symbol: str) -&gt; dict:\n\"\"\"This function returns the contributions of the single_assets symbol\n    Returns\n    -------\n        A dictionary of the contributions of the single_assets symbol\n        OR\n        ValueError if the symbol is not a present in the\n        list of active symbols for asset_type single_assets\n    \"\"\"\nif self.asset_type != AssetType.SINGLE_ASSET.value:\nraise ValueError(\nf\"The asset type must be {AssetType.SINGLE_ASSET.value} to use this function\"\n)\noutput = \"\"\ndata = await self.get_active_data(symbol=symbol)\noutput = data.get(\"contrib\", None)\nif output == \"\" or output is None:\nraise ValueError(\nf\"The symbol {symbol} does not have any contributions associated with it.\"\n)\nreturn output\n</code></pre>"},{"location":"vintersdk_doc/vinter_sdk_ws/","title":"VinterAPIWS","text":""},{"location":"vintersdk_doc/vinter_sdk_ws/#vintersdk.vinter_sdk_ws","title":"vinter_sdk_ws","text":""},{"location":"vintersdk_doc/vinter_sdk_ws/#vintersdk.vinter_sdk_ws.VinterAPIWS","title":"VinterAPIWS","text":"<pre><code>VinterAPIWS(\nsymbol: str,\ntoken: str,\nasset_type: WsAssetType,\non_message: callable,\non_error: callable,\non_close: callable,\non_open: callable,\n)\n</code></pre> <p>Parameters:</p> <ul> <li> <code>symbol</code>             (<code>str</code>)         \u2013          <p>The symbol of the asset you want to get data for.</p> </li> <li> <code>token</code>             (<code>str</code>)         \u2013          <p>The API token.</p> </li> <li> <code>asset_type</code>             (<code>WsAssetType(str)</code>)         \u2013          <p>The type of asset you want to get data for.</p> </li> <li> <code>on_message</code>             (<code>callable</code>)         \u2013          <p>Callback function for when a message is received.</p> </li> <li> <code>on_error</code>             (<code>callable</code>)         \u2013          <p>Callback function for when an error occurs.</p> </li> <li> <code>on_close</code>             (<code>callable</code>)         \u2013          <p>Callback function for when the connection is closed.</p> </li> <li> <code>on_open</code>             (<code>callable</code>)         \u2013          <p>Callback function for when the connection is opened.</p> </li> </ul> Source code in <code>vintersdk/vinter_sdk_ws.py</code> <pre><code>def __init__(\nself,\nsymbol: str,\ntoken: str,\nasset_type: WsAssetType,\non_message: callable,\non_error: callable,\non_close: callable,\non_open: callable,\n):\n\"\"\"\n    This class is used to create a websocket connection to the Vinter API.\n    Parameters\n    ----------\n    symbol : str\n        The symbol of the asset you want to get data for.\n    token : str\n        The API token.\n    asset_type : WsAssetType (str)\n        The type of asset you want to get data for.\n    on_message : callable\n        Callback function for when a message is received.\n    on_error : callable\n        Callback function for when an error occurs.\n    on_close : callable\n        Callback function for when the connection is closed.\n    on_open : callable\n        Callback function for when the connection is opened.\n    \"\"\"\nself.ws = None\nself.symbol = symbol\nself.token = token\nself.asset_type = asset_type\nself.url = self.get_ws_url() + \"/?token=\" + self.token\nself.on_message = on_message\nself.on_error = on_error\nself.on_close = on_close\nself.on_open = on_open\n</code></pre>"},{"location":"vintersdk_doc/vinter_sdk_ws/#vintersdk.vinter_sdk_ws.VinterAPIWS.close","title":"close","text":"<pre><code>close()\n</code></pre> <p>The function closes the websocket connection</p> Source code in <code>vintersdk/vinter_sdk_ws.py</code> <pre><code>def close(self):\n\"\"\"The function closes the websocket connection\"\"\"\nself.ws.close()\n</code></pre>"},{"location":"vintersdk_doc/vinter_sdk_ws/#vintersdk.vinter_sdk_ws.VinterAPIWS.get_ws_url","title":"get_ws_url","text":"<pre><code>get_ws_url()\n</code></pre> <p>It takes the asset type and symbol and returns the websocket url</p> <p>Returns:</p> <ul> <li> <code>    The websocket url for the asset type and symbol.</code>         \u2013          </li> </ul> Source code in <code>vintersdk/vinter_sdk_ws.py</code> <pre><code>def get_ws_url(self):\n\"\"\"It takes the asset type and symbol and returns the websocket url\n    Returns\n    -------\n        The websocket url for the asset type and symbol.\n    \"\"\"\nreturn VinterUrl.websocket_url(self.asset_type, self.symbol)\n</code></pre>"},{"location":"vintersdk_doc/vinter_sdk_ws/#vintersdk.vinter_sdk_ws.VinterAPIWS.open","title":"open","text":"<pre><code>open()\n</code></pre> <p>The function opens a websocket connection to the url specified in the constructor</p> Source code in <code>vintersdk/vinter_sdk_ws.py</code> <pre><code>def open(self):\n\"\"\"The function opens a websocket connection to the url specified in the constructor\"\"\"\nself.ws = websocket.WebSocketApp(\nself.url,\non_message=self.on_message,\non_error=self.on_error,\non_close=self.on_close,\non_open=self.on_open,\n)\nself.ws.run_forever()\n</code></pre>"}]}